//@author @pkmelo7

package com.mycompany.telas;

//Importações necessárias
import com.mycompany.classes.Usuario;
import com.mycompany.telas.admin.Tela_AdminCadastrarUser;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
//Fim das importações necessárias

public class Tela_Cadastro extends javax.swing.JFrame 
{
    //Declaração de variáveis
        //Variáveis para o movimento do logo Synapse
        final int originalX = 10;
        final int targetX = 150;
        final int step = 10;
        Timer timer = new Timer(20, null);
    
        //Variável para determinar se o checkbox que torna a senha visivel esta ativo ou nao
        boolean showing = false;
    
        //Variaveis para configurar a fonte como poppins
        Font poppins;
        GraphicsEnvironment GE = GraphicsEnvironment.getLocalGraphicsEnvironment();
        
        //Variavel para trazer o icone do projeto
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/icon.png"));
        
        Usuario usuario = new Usuario();
        
        MaskFormatter mask;
        
        Timer timerAlerta;
        
        boolean cadastrado = false;
        
        boolean acaoConcluida = false;
    //Final da declaração de variáveis
    
    //Declaração de métodos 
        //cria o método abrirTela_Login, onde invoca a tela de login e fecha a tela de cadastro
        private void abrirTela_Login() throws FontFormatException, IOException
        {
            Tela_Login Tela_Login = new Tela_Login();
            this.dispose();
            Tela_Login.setVisible(true);
        }
        
        //cria o método abrirTela_Sobre, onde invoca a tela de sobre e fecha a tela de cadastro
        private void abrirTela_Sobre() throws FontFormatException, IOException, SQLException
        {
            Tela_Sobre Tela_Sobre = new Tela_Sobre();
            this.dispose();
            Tela_Sobre.setVisible(true);
        }
        
        //cria o método abrirTela_Menu, onde invoca a tela de menu e fecha a tela atual
        private void abrirTelaMenu() throws FontFormatException, IOException, SQLException
        {
            Tela_Menu TelaMenu = new Tela_Menu();
            this.dispose();
            TelaMenu.setVisible(true);
        }
        
        private void abrirTelaCursos() throws FontFormatException, IOException, SQLException
        {
            Tela_Cursos TelaCursos = new Tela_Cursos();
            this.dispose();
            TelaCursos.setVisible(true);
        }
    //Fim da declaração de métodos
    
    public Tela_Cadastro() throws FontFormatException, IOException {
        //cria a fonte poppins no projeto
        this.poppins = Font.createFont(Font.TRUETYPE_FONT, new File("src/main/resources/fonts/Poppins-Bold.ttf"));
        initComponents();
        configurarCampoEmail();
        configurarCampoUser();
        
        try
        {
            mask = new MaskFormatter("##/##/####");
            mask.setPlaceholderCharacter('_');
            fieldNasc.setFormatterFactory(new DefaultFormatterFactory(mask));
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelAlerta = new javax.swing.JPanel();
        panelAlerta2 = new javax.swing.JPanel();
        labelAlerta = new javax.swing.JLabel();
        buttonOkAlerta = new javax.swing.JButton();
        labelContagem = new javax.swing.JLabel();
        fundoAlerta = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        buttonSynapse = new javax.swing.JButton();
        buttonSynapseLogo = new javax.swing.JButton();
        fieldPesquisa = new javax.swing.JTextField();
        buttonXpesq = new javax.swing.JButton();
        buttonSobre = new javax.swing.JButton();
        buttonCursos = new javax.swing.JButton();
        buttonLogin = new javax.swing.JButton();
        fieldNome = new javax.swing.JTextField();
        labelNasc = new javax.swing.JLabel();
        fieldNasc = new javax.swing.JFormattedTextField();
        fieldUser = new javax.swing.JTextField();
        fieldEmail = new javax.swing.JTextField();
        labelSenha = new javax.swing.JLabel();
        fieldSenha = new javax.swing.JPasswordField();
        checkboxSenha = new javax.swing.JCheckBox();
        buttonCadastrar = new javax.swing.JButton();
        buttonSeta = new javax.swing.JButton();
        buttonPR = new javax.swing.JButton();
        buttonXTelas = new javax.swing.JButton();
        labelTxtNasc = new javax.swing.JLabel();
        labelEmail = new javax.swing.JLabel();
        labelUser = new javax.swing.JLabel();
        fundo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Synapse Connect");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setIconImage(icon.getImage());
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1366, 750));
        getContentPane().setLayout(null);

        panelAlerta.setOpaque(false);
        panelAlerta.setVisible(false);
        panelAlerta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelAlertaMouseClicked(evt);
            }
        });
        panelAlerta.setLayout(null);

        panelAlerta2.setBackground(new java.awt.Color(204, 204, 204));
        panelAlerta2.setForeground(new java.awt.Color(69, 82, 173));
        panelAlerta2.setLayout(null);

        labelAlerta.setFont(poppins.deriveFont(20f));
        labelAlerta.setForeground(new java.awt.Color(69, 82, 173));
        labelAlerta.setHorizontalAlignment(SwingConstants.CENTER);
        panelAlerta2.add(labelAlerta);
        labelAlerta.setBounds(7, 66, 490, 100);

        buttonOkAlerta.setBackground(new java.awt.Color(0, 0, 0));
        buttonOkAlerta.setFont(poppins.deriveFont(20f));
        buttonOkAlerta.setForeground(new java.awt.Color(69, 82, 173));
        buttonOkAlerta.setText("OK");
        buttonOkAlerta.setBorder(null);
        buttonOkAlerta.setBorderPainted(false);
        buttonOkAlerta.setContentAreaFilled(false);
        buttonOkAlerta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonOkAlerta.setFocusable(false);
        buttonOkAlerta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonOkAlertaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonOkAlertaMouseExited(evt);
            }
        });
        panelAlerta2.add(buttonOkAlerta);
        buttonOkAlerta.setBounds(355, 210, 100, 40);

        labelContagem.setBackground(new java.awt.Color(0, 0, 0));
        labelContagem.setFont(poppins.deriveFont(20f));
        labelContagem.setForeground(new java.awt.Color(69, 82, 173));
        labelContagem.setText("Tempo Restante: 5");
        labelContagem.setHorizontalAlignment(SwingConstants.RIGHT);
        panelAlerta2.add(labelContagem);
        labelContagem.setBounds(87, 210, 260, 40);

        fundoAlerta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/FundosTelas/janelaAlerta.png"))); // NOI18N
        fundoAlerta.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(69, 82, 173), 1, true));
        panelAlerta2.add(fundoAlerta);
        fundoAlerta.setBounds(0, 0, 500, 280);

        panelAlerta.add(panelAlerta2);
        panelAlerta2.setBounds(433, 243, 500, 281);

        getContentPane().add(panelAlerta);
        panelAlerta.setBounds(0, 0, 1366, 768);

        jPanel1.setLayout(null);

        buttonSynapse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/NomeLogo.png"))); // NOI18N
        buttonSynapse.setBorder(null);
        buttonSynapse.setBorderPainted(false);
        buttonSynapse.setContentAreaFilled(false);
        buttonSynapse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSynapse.setFocusPainted(false);
        buttonSynapse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonSynapseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonSynapseMouseExited(evt);
            }
        });
        buttonSynapse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSynapseActionPerformed(evt);
            }
        });
        jPanel1.add(buttonSynapse);
        buttonSynapse.setBounds(30, 0, 260, 160);

        buttonSynapseLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Formas/IconSynapse.png"))); // NOI18N
        buttonSynapseLogo.setBorder(null);
        buttonSynapseLogo.setBorderPainted(false);
        buttonSynapseLogo.setContentAreaFilled(false);
        buttonSynapseLogo.setFocusPainted(false);
        jPanel1.add(buttonSynapseLogo);
        buttonSynapseLogo.setBounds(10, 0, 170, 160);

        fieldPesquisa.setBackground(new java.awt.Color(224, 222, 222));
        fieldPesquisa.setFont(poppins.deriveFont(14f));
        fieldPesquisa.setForeground(new java.awt.Color(128, 128, 128));
        fieldPesquisa.setText("Pesquisar:");
        fieldPesquisa.setBorder(null);
        fieldPesquisa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldPesquisaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldPesquisaFocusLost(evt);
            }
        });
        fieldPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldPesquisaActionPerformed(evt);
            }
        });
        jPanel1.add(fieldPesquisa);
        fieldPesquisa.setBounds(380, 50, 380, 50);

        buttonXpesq.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/X.png"))); // NOI18N
        buttonXpesq.setBorder(null);
        buttonXpesq.setBorderPainted(false);
        buttonXpesq.setContentAreaFilled(false);
        buttonXpesq.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonXpesq.setFocusPainted(false);
        buttonXpesq.setMaximumSize(new java.awt.Dimension(86, 19));
        buttonXpesq.setMinimumSize(new java.awt.Dimension(86, 19));
        buttonXpesq.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonXpesqMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonXpesqMouseExited(evt);
            }
        });
        buttonXpesq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonXpesqActionPerformed(evt);
            }
        });
        jPanel1.add(buttonXpesq);
        buttonXpesq.setBounds(780, 60, 40, 30);

        buttonSobre.setFont(poppins.deriveFont(24f));
        buttonSobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/Sobre.png"))); // NOI18N
        buttonSobre.setBorder(null);
        buttonSobre.setBorderPainted(false);
        buttonSobre.setContentAreaFilled(false);
        buttonSobre.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSobre.setFocusPainted(false);
        buttonSobre.setMaximumSize(new java.awt.Dimension(86, 19));
        buttonSobre.setMinimumSize(new java.awt.Dimension(86, 19));
        buttonSobre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonSobreMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonSobreMouseExited(evt);
            }
        });
        buttonSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSobreActionPerformed(evt);
            }
        });
        jPanel1.add(buttonSobre);
        buttonSobre.setBounds(930, 60, 80, 30);

        buttonCursos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/Cursos.png"))); // NOI18N
        buttonCursos.setBorder(null);
        buttonCursos.setBorderPainted(false);
        buttonCursos.setContentAreaFilled(false);
        buttonCursos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonCursos.setFocusPainted(false);
        buttonCursos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonCursosMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonCursosMouseExited(evt);
            }
        });
        buttonCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCursosActionPerformed(evt);
            }
        });
        jPanel1.add(buttonCursos);
        buttonCursos.setBounds(1030, 60, 100, 30);

        buttonLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/Login.png"))); // NOI18N
        buttonLogin.setBorder(null);
        buttonLogin.setBorderPainted(false);
        buttonLogin.setContentAreaFilled(false);
        buttonLogin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonLogin.setFocusPainted(false);
        buttonLogin.setMaximumSize(new java.awt.Dimension(86, 19));
        buttonLogin.setMinimumSize(new java.awt.Dimension(86, 19));
        buttonLogin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonLoginMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonLoginMouseExited(evt);
            }
        });
        buttonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoginActionPerformed(evt);
            }
        });
        jPanel1.add(buttonLogin);
        buttonLogin.setBounds(1150, 50, 170, 55);

        fieldNome.setBackground(new java.awt.Color(224, 222, 222));
        fieldNome.setFont(poppins.deriveFont(14f)
        );
        fieldNome.setForeground(new java.awt.Color(128, 128, 128));
        fieldNome.setText("Nome");
        fieldNome.setBorder(null);
        fieldNome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldNomeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldNomeFocusLost(evt);
            }
        });
        fieldNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNomeActionPerformed(evt);
            }
        });
        jPanel1.add(fieldNome);
        fieldNome.setBounds(360, 300, 380, 40);

        labelNasc.setBackground(new java.awt.Color(224, 222, 222));
        labelNasc.setFont(poppins.deriveFont(14f));
        labelNasc.setForeground(new java.awt.Color(128, 128, 128));
        labelNasc.setText("Nascimento");
        labelNasc.setOpaque(true);
        jPanel1.add(labelNasc);
        labelNasc.setBounds(360, 367, 370, 40);

        fieldNasc.setBackground(new java.awt.Color(224, 222, 222));
        fieldNasc.setBorder(null);
        fieldNasc.setForeground(new java.awt.Color(0, 0, 0));
        fieldNasc.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        fieldNasc.setText("jFormattedTextField1");
        fieldNasc.setFont(poppins.deriveFont(14f)
        );
        fieldNasc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldNascFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldNascFocusLost(evt);
            }
        });
        jPanel1.add(fieldNasc);
        fieldNasc.setBounds(360, 367, 380, 40);

        fieldUser.setBackground(new java.awt.Color(224, 222, 222));
        fieldUser.setFont(poppins.deriveFont(14f));
        fieldUser.setForeground(new java.awt.Color(128, 128, 128));
        fieldUser.setText("Usuario");
        fieldUser.setBorder(null);
        fieldUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldUserActionPerformed(evt);
            }
        });
        jPanel1.add(fieldUser);
        fieldUser.setBounds(360, 433, 380, 40);

        fieldEmail.setBackground(new java.awt.Color(224, 222, 222));
        fieldEmail.setFont(poppins.deriveFont(14f));
        fieldEmail.setForeground(new java.awt.Color(128, 128, 128));
        fieldEmail.setText("E-mail");
        fieldEmail.setBorder(null);
        jPanel1.add(fieldEmail);
        fieldEmail.setBounds(360, 500, 380, 40);

        labelSenha.setFont(poppins.deriveFont(14f));
        labelSenha.setForeground(new java.awt.Color(128, 128, 128));
        labelSenha.setText("Senha:");
        jPanel1.add(labelSenha);
        labelSenha.setBounds(360, 568, 50, 40);

        fieldSenha.setBackground(new java.awt.Color(224, 222, 222));
        fieldSenha.setFont(poppins.deriveFont(14f));
        fieldSenha.setForeground(new java.awt.Color(128, 128, 128));
        fieldSenha.setBorder(null);
        fieldSenha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldSenhaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldSenhaFocusLost(evt);
            }
        });
        fieldSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldSenhaActionPerformed(evt);
            }
        });
        fieldSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldSenhaKeyReleased(evt);
            }
        });
        jPanel1.add(fieldSenha);
        fieldSenha.setBounds(360, 568, 360, 40);

        checkboxSenha.setBorder(null);
        checkboxSenha.setContentAreaFilled(false);
        checkboxSenha.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkboxSenha.setFocusPainted(false);
        checkboxSenha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/SenhaMostrar.png"))); // NOI18N
        checkboxSenha.setVisible(false);
        checkboxSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxSenhaActionPerformed(evt);
            }
        });
        jPanel1.add(checkboxSenha);
        checkboxSenha.setBounds(720, 568, 20, 40);

        buttonCadastrar.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        buttonCadastrar.setForeground(new java.awt.Color(255, 255, 255));
        buttonCadastrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/Cadastrar.png"))); // NOI18N
        buttonCadastrar.setBorder(null);
        buttonCadastrar.setBorderPainted(false);
        buttonCadastrar.setContentAreaFilled(false);
        buttonCadastrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonCadastrar.setFocusPainted(false);
        buttonCadastrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonCadastrarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonCadastrarMouseExited(evt);
            }
        });
        buttonCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCadastrarActionPerformed(evt);
            }
        });
        jPanel1.add(buttonCadastrar);
        buttonCadastrar.setBounds(452, 630, 160, 50);

        buttonSeta.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        buttonSeta.setForeground(new java.awt.Color(255, 255, 255));
        buttonSeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/Seta.png"))); // NOI18N
        buttonSeta.setBorder(null);
        buttonSeta.setBorderPainted(false);
        buttonSeta.setContentAreaFilled(false);
        buttonSeta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSeta.setFocusPainted(false);
        buttonSeta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonSetaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonSetaMouseExited(evt);
            }
        });
        buttonSeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSetaActionPerformed(evt);
            }
        });
        jPanel1.add(buttonSeta);
        buttonSeta.setBounds(855, 575, 190, 60);

        buttonPR.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        buttonPR.setForeground(new java.awt.Color(255, 255, 255));
        buttonPR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/IconSynapsePreto.png"))); // NOI18N
        buttonPR.setBorder(null);
        buttonPR.setBorderPainted(false);
        buttonPR.setContentAreaFilled(false);
        buttonPR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonPR.setFocusPainted(false);
        buttonPR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonPRMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonPRMouseExited(evt);
            }
        });
        buttonPR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPRActionPerformed(evt);
            }
        });
        jPanel1.add(buttonPR);
        buttonPR.setBounds(1270, 655, 80, 70);

        buttonXTelas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/XFecharTelas.png"))); // NOI18N
        buttonXTelas.setBorder(null);
        buttonXTelas.setBorderPainted(false);
        buttonXTelas.setContentAreaFilled(false);
        buttonXTelas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonXTelas.setFocusPainted(false);
        buttonXTelas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonXTelasMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonXTelasMouseExited(evt);
            }
        });
        buttonXTelas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonXTelasActionPerformed(evt);
            }
        });
        jPanel1.add(buttonXTelas);
        buttonXTelas.setBounds(1280, 0, 86, 25);

        labelTxtNasc.setForeground(new java.awt.Color(204, 0, 0));
        jPanel1.add(labelTxtNasc);
        labelTxtNasc.setBounds(350, 410, 260, 20);

        labelEmail.setText("Formato: exemplo@dominio.com");
        jPanel1.add(labelEmail);
        labelEmail.setBounds(350, 543, 320, 20);

        labelUser.setForeground(new java.awt.Color(204, 0, 0));
        jPanel1.add(labelUser);
        labelUser.setBounds(350, 480, 260, 15);

        fundo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/FundosTelas/FundoCadastro.png"))); // NOI18N
        jPanel1.add(fundo);
        fundo.setBounds(0, -17, 1370, 800);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1366, 768);

        setBounds(-6, 0, 1366, 768);
    }// </editor-fold>//GEN-END:initComponents

//---------------------------------------------------------------------------------------------------------------------------------
    
//Comandos do field "Nome"
    //<null>
    private void fieldNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldNomeActionPerformed
    //Faz com que a palavra "Nome" desapareça de dentro do field quando o foco é retomado
    private void fieldNomeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldNomeFocusGained
        // TODO add your handling code here:
        if (fieldNome.getText().equals("Nome")) {
            fieldNome.setText("");
            fieldNome.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_fieldNomeFocusGained
    //Faz com que a palavra "Nome" apareça dentro do field quando o foco é perdido
    private void fieldNomeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldNomeFocusLost
        // TODO add your handling code here:
        if (fieldNome.getText().isEmpty()) {
            fieldNome.setForeground(Color.GRAY);
            fieldNome.setText("Nome");
        }
    }//GEN-LAST:event_fieldNomeFocusLost
//Fim dos comandos do field "Nome"
    
    private void configurarCampoUser() {
       // Adicionar um ouvinte de foco para limpar e restaurar o texto de placeholder
        fieldUser.addFocusListener(new FocusListener() 
        {
            public void focusGained(FocusEvent e) 
            {
                // Quando o campo recebe foco, limpar o texto (se for o placeholder)
                if (fieldUser.getText().equals("Usuario")) 
                {
                    fieldUser.setText("");
                    fieldUser.setForeground(new Color(0,0,0)); // Cor verde, por exemplo
                }
            }

            public void focusLost(FocusEvent e) 
            {
                if (fieldUser.getText().isEmpty()) 
                {
                    fieldUser.setForeground(new Color(128,128,128));
                    fieldUser.setText("Usuario");
                    labelUser.setText("");
                }
                else
                {  
                    String usu = fieldUser.getText();
                    usuario.setUser(usu);
                    try 
                    {
                        if(usuario.verificaUserExiste())
                        {
                            labelUser.setText("*Usuario já cadastrado");
                            labelUser.setForeground(Color.red);
                        }
                        else
                        {
                            labelUser.setText("*Usuario válido");
                            labelUser.setForeground(new Color(0,255,8));
                        }
                    } 
                    catch (SQLException ex) 
                    {
                        Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }
    
    private void configurarCampoEmail() 
    {
        // Texto placeholder
        fieldEmail.setText("E-mail");
        fieldEmail.setForeground(new Color(128,128,128)); // Cor mais suave para o placeholder

        // Inicializar o JLabel com o texto inicial de formato
        labelEmail.setText("Formato: exemplo@dominio.com");
        labelEmail.setForeground(new Color(153, 153, 153)); // Cor mais suave para o formato
      
        // Adicionar um ouvinte de foco para limpar e restaurar o texto de placeholder
        fieldEmail.addFocusListener(new FocusListener() 
        {
            public void focusGained(FocusEvent e) 
            {
                // Quando o campo recebe foco, limpar o texto (se for o placeholder)
                if (fieldEmail.getText().equals("E-mail")) 
                {
                    fieldEmail.setText("");
                    fieldEmail.setForeground(new Color(0,0,0)); // Cor verde, por exemplo
                }
            }

            public void focusLost(FocusEvent e) {
                // Se o campo estiver vazio, restaurar o texto de placeholder
                if (fieldEmail.getText().isEmpty()) {
                    fieldEmail.setText("E-mail");
                    fieldEmail.setForeground(new Color(128,128,128)); // Cor mais suave para o placeholder
                    labelEmail.setText("Formato: exemplo@dominio.com"); // Exibir o formato padrão
                    labelEmail.setForeground(new Color(153, 153, 153)); // Cor suave
                } 
                else 
                {
                    // Se o campo não estiver vazio, validação de formato
                    if (!validarEmail(fieldEmail.getText())) 
                    {
                        labelEmail.setText("Formato de e-mail inválido! Use exemplo@dominio.com.");
                        labelEmail.setForeground(Color.RED); // Cor vermelha para erro
                    } 
                    else
                    {
                        String email = fieldEmail.getText();
                        usuario.setEmail(email);
                        try 
                        {
                            if(usuario.verificaEmailExiste())
                            {
                                labelEmail.setText("*E-mail já cadastrado");
                                labelEmail.setForeground(Color.RED);
                            }
                            else
                            {   
                                labelEmail.setText("*E-mail válido");
                                labelEmail.setForeground(new Color(0,255,8));
                            }
                        }
                        catch (SQLException ex) 
                        {
                            Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        });
    } 
    
    private boolean validarEmail(String email)
    {
        return email.matches("[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}");
    }

//Fim dos comandos do field "E-mail"

//---------------------------------------------------------------------------------------------------------------------------------

//Início dos comandos do field "Senha"
   //<null>
    private void fieldSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldSenhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldSenhaActionPerformed
    //Faz com que a palavra "Senha" desapareça de dentro do field quando o foco é retomado
    private void fieldSenhaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldSenhaFocusGained
        // TODO add your handling code here:
        if (labelSenha.getText().equals("Senha:")) {
            labelSenha.setText("");
            fieldSenha.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_fieldSenhaFocusGained
    //Faz com que a palavra "Senha" apareça dentro do field quando o foco é perdido
    private void fieldSenhaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldSenhaFocusLost
        // TODO add your handling code here:
        if (labelSenha.getText().isEmpty() || fieldSenha.getText().isEmpty()) {
            labelSenha.setForeground(Color.GRAY);
            labelSenha.setText("Senha:");
        }
    }//GEN-LAST:event_fieldSenhaFocusLost
    //Caso algo seja digitado no fieldSenha, seta o labelSenha como nulo e o checkbox como Mostrar e visível
    //Caso nada seja digitado no fieldSenha ou o que foi digitado no fieldSenha seja apagado, seta o checkbox como invisível
    private void fieldSenhaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldSenhaKeyReleased
        // TODO add your handling code here:
        if (fieldSenha.getPassword().length > 0) 
        {
            labelSenha.setText(" ");
            checkboxSenha.setVisible(true);
            Icon MostrarSenha = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/SenhaMostrar.png"));
            checkboxSenha.setIcon(MostrarSenha);
        }
        else
        {
            checkboxSenha.setVisible(false);
        }   
    }//GEN-LAST:event_fieldSenhaKeyReleased
    //Seta os icons OcultarSenha e MostrarSenha
    //Caso showing = false: seta o field "Senha" como "*" e o checkbox como Ocultar
    //Caso showing = true: seta o field "Senha" como char e o checkbox como Mostrar
    private void checkboxSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxSenhaActionPerformed
        // TODO add your handling code here:
        Icon OcultarSenha = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/SenhaOcultar.png"));
        Icon MostrarSenha = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/SenhaMostrar.png"));
                
        if(showing)
        {
            fieldSenha.setEchoChar('*');
            checkboxSenha.setIcon(MostrarSenha);
        }
        else
        {
            fieldSenha.setEchoChar((char) 0);
            checkboxSenha.setIcon(OcultarSenha);
        }
        showing = !showing;
    }//GEN-LAST:event_checkboxSenhaActionPerformed
//Fim dos comandos do field "Senha"

//---------------------------------------------------------------------------------------------------------------------------------

//Início dos comandos do field "Pesquisar"
    //<null>
    private void fieldPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldPesquisaActionPerformed
    //Faz com que a palavra "Pesquisar" desapareça de dentro do field quando o foco é retomado
    private void fieldPesquisaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldPesquisaFocusGained
        // TODO add your handling code here:
        if (fieldPesquisa.getText().equals("Pesquisar:")) {
            fieldPesquisa.setText("");
            fieldPesquisa.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_fieldPesquisaFocusGained
    //Faz com que a palavra "Pesquisar" apareça dentro do field quando o foco é perdido
    private void fieldPesquisaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldPesquisaFocusLost
        // TODO add your handling code here:
        if (fieldPesquisa.getText().isEmpty()) {
            fieldPesquisa.setForeground(Color.GRAY);
            fieldPesquisa.setText("Pesquisar:");
        }
    }//GEN-LAST:event_fieldPesquisaFocusLost
//Início dos comandos do botão "X" para o field "Pesquisar"
    //Faz com que ao clicar no botão "X", tudo que possa estar escrito dentro do field "Pesquisar" seja apagado e o field seja setado novamente como "Pesquisar" na cor cinza
    private void buttonXpesqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonXpesqActionPerformed
        // TODO add your handling code here:
        fieldPesquisa.setForeground(Color.GRAY);
        fieldPesquisa.setText("Pesquisar:");
    }//GEN-LAST:event_buttonXpesqActionPerformed
    //Faz o botão de X para o field "Pesquisar" ficar Azul ao passar o mouse por cima
    private void buttonXpesqMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonXpesqMouseEntered
        // TODO add your handling code here:
        ImageIcon XpesqAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/XAzul.png"));
        buttonXpesq.setIcon(XpesqAzul);
    }//GEN-LAST:event_buttonXpesqMouseEntered
    //Faz o botão de X para o field "Pesquisar" voltar à cor padrão ao tirar o mouse de cima
    private void buttonXpesqMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonXpesqMouseExited
        // TODO add your handling code here:
        ImageIcon Xpesq = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/X.png"));
        buttonXpesq.setIcon(Xpesq);
    }//GEN-LAST:event_buttonXpesqMouseExited
//Fim dos comandos do botão "X" para o field "Pesquisar"
//Fim dos comandos do field "Pesquisar"
    
//---------------------------------------------------------------------------------------------------------------------------------
   
//Início dos comandos do botão do Logo "Synapse Connect"
    //<null>
    private void buttonSynapseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSynapseActionPerformed
            try {
                // TODO add your handling code here:
                abrirTelaMenu();
            } catch (FontFormatException ex) {
                Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_buttonSynapseActionPerformed
    //Move o Logo "Synapse Connect" à posição final enquanto o mouse estiver em cima
    private void buttonSynapseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSynapseMouseEntered
        // TODO add your handling code here:
        timer.stop();
        timer = new Timer(20, new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                int x = buttonSynapseLogo.getX();
                int y = buttonSynapseLogo.getY();

                if (x < targetX) {
                    buttonSynapseLogo.setLocation(x + step, y);
                }
            }
        });
        timer.start();
    }//GEN-LAST:event_buttonSynapseMouseEntered
    //Move o Logo "Synapse Connect" à posição inicial quando o mouse sair de cima
    private void buttonSynapseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSynapseMouseExited
        // TODO add your handling code here:
        timer.stop();
        timer = new Timer(20, new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                int x = buttonSynapseLogo.getX();
                int y = buttonSynapseLogo.getY();

                if (x > originalX) {
                    buttonSynapseLogo.setLocation(x - step, y);
                }
            }
        });
        timer.start();
    }//GEN-LAST:event_buttonSynapseMouseExited
//Fim dos comandos do botão do Logo "Synapse Connect"

//---------------------------------------------------------------------------------------------------------------------------------
    
//Início dos comandos do botão "Sobre"
    //<null>
    private void buttonSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSobreActionPerformed
            try {
                // TODO add your handling code here:
                abrirTela_Sobre();
            } catch (FontFormatException ex) {
                Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_buttonSobreActionPerformed
    //Faz o botão Sobre ficar Azul ao passar o mouse por cima
    private void buttonSobreMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSobreMouseEntered
        // TODO add your handling code here:
        ImageIcon SobreAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/SobreAzul.png"));
        buttonSobre.setIcon(SobreAzul);
    }//GEN-LAST:event_buttonSobreMouseEntered
    //Faz o botão Sobre voltar à cor padrão ao tirar o mouse de cima
    private void buttonSobreMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSobreMouseExited
        // TODO add your handling code here:
        ImageIcon Sobre = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/Sobre.png"));
        buttonSobre.setIcon(Sobre);
    }//GEN-LAST:event_buttonSobreMouseExited
//Fim dos comandos do botão "Sobre"

//---------------------------------------------------------------------------------------------------------------------------------
  
//Início dos comandos do botão "Cursos"
    //<null>
    private void buttonCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCursosActionPerformed
            try {
                // TODO add your handling code here:

                abrirTelaCursos();
            } catch (FontFormatException ex) {
                Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_buttonCursosActionPerformed
    //Faz o botão Cursos ficar Azul ao passar o mouse por cima
    private void buttonCursosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCursosMouseEntered
        // TODO add your handling code here:
        ImageIcon CursosAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/CursosAzul.png"));
        buttonCursos.setIcon(CursosAzul);
    }//GEN-LAST:event_buttonCursosMouseEntered
    //Faz o botão Sobre voltar à cor padrão ao tirar o mouse de cima
    private void buttonCursosMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCursosMouseExited
        // TODO add your handling code here:
        ImageIcon Cursos = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/Cursos.png"));
        buttonCursos.setIcon(Cursos);
    }//GEN-LAST:event_buttonCursosMouseExited
//Fim dos comandos do botão "Cursos"

//---------------------------------------------------------------------------------------------------------------------------------
 
//Início dos comandos do botão "Entrar"
    //Faz com que ao clicar no botao "Entrar", o método abrirTela_Login seja executado
    private void buttonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoginActionPerformed
        try {
            // TODO add your handling code here:
            abrirTela_Login();
        } catch (FontFormatException ex) {
            Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonLoginActionPerformed
    //Faz o botão Entrar ficar Azul ao passar o mouse por cima
    private void buttonLoginMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonLoginMouseEntered
        // TODO add your handling code here:
        ImageIcon LoginAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/LoginAzul.png"));
        buttonLogin.setIcon(LoginAzul);
    }//GEN-LAST:event_buttonLoginMouseEntered
    //Faz o botão Entrar voltar à cor padrão ao tirar o mouse de cima
    private void buttonLoginMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonLoginMouseExited
        // TODO add your handling code here:
        ImageIcon Login = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/Login.png"));
        buttonLogin.setIcon(Login);
    }//GEN-LAST:event_buttonLoginMouseExited
//Fim dos comandos do botão "Entrar"

//---------------------------------------------------------------------------------------------------------------------------------

//Início dos comandos do botão "Cadastrar"
    //<null>
    private void buttonCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCadastrarActionPerformed
        // TODO add your handling code here:
        String nome = null;
        String nasc = null;
        String usu = null; 
        String email = null;
        String senha = null;
        
        if(fieldNome.getText().equals("Nome") || fieldNome.getText().equals(""))
        {
            labelAlerta.setText("Nome vazio, por favor preencha.");
            mensagemErro();
        }
        else
        {
            nome = fieldNome.getText();
        }
        
        if(fieldNasc.getText().equals("") || labelNasc.isVisible())
        {
            labelAlerta.setText("Nascimento vazio, por favor preencha.");
            mensagemErro();
        }
        else
        {
            if (!validarData(fieldNasc.getText())) 
            {
                labelAlerta.setText("Data inválida, tente novamente.");
                mensagemErro();
            }
            else
            {
               nasc = fieldNasc.getText();
            }
        }
        
        if(fieldUser.getText().equals("Usuario") || fieldUser.getText().equals(""))
        {
            labelAlerta.setText("Usuario vazio, por favor preencha.");
            mensagemErro();
        }
        else
        {
            usu = fieldUser.getText();
        }
        
        if(fieldEmail.getText().equals("E-mail") || fieldEmail.getText().equals(""))
        {
            labelAlerta.setText("Email vazio, por favor preencha.");
            mensagemErro();
        }
        else
        {
            if (!validarEmail(fieldEmail.getText())) 
            {
                labelAlerta.setText("Email inválido, tente novamente.");
                mensagemErro();
            }
            else
            {
               email = fieldEmail.getText();
            }   
        }
        
        if(fieldSenha.getText().equals("Senha") || fieldSenha.getText().equals(""))
        {
            labelAlerta.setText("Senha vazia, por favor preencha.");
            mensagemErro();
        }
        else
        {
            senha = fieldSenha.getText();
        }
        
        usuario.setNome(nome);
        usuario.setDtnasc(nasc);
        usuario.setUser(usu);
        usuario.setEmail(email);
        usuario.setSenha(senha);
        
        try 
        {
            // Verifica se o usuário ou email já existem
            if (usuario.verificaUserExiste()) 
            {
                labelAlerta.setText("Usuario já cadastrado, tente novamente.");
                mensagemErro();
            }
            else if(usuario.verificaEmailExiste())
            {
                labelAlerta.setText("E-mail ja cadastrado, tente novamente.");
                mensagemErro();
            }
            else 
            {
                // Cadastra o novo usuário
                if (usuario.cadastraUser()) 
                {
                    cadastrado = true;
                    labelAlerta.setText("Usuario cadastrado com sucesso.");
                    mensagemErro2();
                }
                else
                {
                    System.out.println("Erro ao cadastar");
                }
            }
        }
        catch (SQLException e) 
        {
            e.printStackTrace();
            System.out.println("Erro ao acessar o banco de dados.");
        }
        
             
    }//GEN-LAST:event_buttonCadastrarActionPerformed

private void mensagemErro()
    {        
         // Garantir que o painel esteja visível após a exclusão
        panelAlerta.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelAlerta.revalidate();
        panelAlerta.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerAlerta != null && timerAlerta.isRunning()) 
        {
            timerAlerta.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerAlerta = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagem.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagem.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelAlerta.setVisible(false);

                    // Para o Timer
                    timerAlerta.stop();

                    acaoConcluida = true;
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerAlerta.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkAlerta.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerAlerta != null) 
                {
                    timerAlerta.stop();
                }

                // Esconde o painel imediatamente
                panelAlerta.setVisible(false);

                acaoConcluida = true;

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagem.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }
    
    private void mensagemErro2()
    {        
         // Garantir que o painel esteja visível após a exclusão
        panelAlerta.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelAlerta.revalidate();
        panelAlerta.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerAlerta != null && timerAlerta.isRunning()) 
        {
            timerAlerta.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerAlerta = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagem.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagem.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelAlerta.setVisible(false);

                    // Para o Timer
                    timerAlerta.stop();

                    acaoConcluida = true;
                    
                    if(cadastrado != false)
                    {
                        try {
                            abrirTela_Login();
                        } catch (FontFormatException ex) {
                            Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else
                    {
                        System.out.println("usuario nao cadastrado");
                    }
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerAlerta.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkAlerta.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerAlerta != null) 
                {
                    timerAlerta.stop();
                }

                // Esconde o painel imediatamente
                panelAlerta.setVisible(false);

                acaoConcluida = true;
                
                if(cadastrado != false)
                {
                    try {
                        abrirTela_Login();
                    } catch (FontFormatException ex) {
                        Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else
                {
                    System.out.println("usuario nao cadastrado");
                }

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagem.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }

    private void limparCampos() 
    {
        fieldNome.setText("Nome");
        fieldNome.setForeground(new Color(0,178,6));
        fieldNasc.setText("");
        labelNasc.setVisible(true);
        fieldUser.setText("Usuario");
        fieldUser.setForeground(new Color(0,178,6));
        fieldEmail.setText("E-mail");
        fieldSenha.setText("");
        labelSenha.setText("Senha");
    }    

//Faz o botão Cadastrar ficar Azul ao passar o mouse por cima
    private void buttonCadastrarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCadastrarMouseEntered
        // TODO add your handling code here:
        ImageIcon CadastrarAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/CadastrarAzul.png"));
        buttonCadastrar.setIcon(CadastrarAzul);
    }//GEN-LAST:event_buttonCadastrarMouseEntered
    //Faz o botão Cadastrar voltar a cor padrão ao tirar o mouse de cima
    private void buttonCadastrarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCadastrarMouseExited
        // TODO add your handling code here:
        ImageIcon Cadastrar = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/Cadastrar.png"));
        buttonCadastrar.setIcon(Cadastrar);
    }//GEN-LAST:event_buttonCadastrarMouseExited
//Fim dos comandos do botão "Cadastrar"

//---------------------------------------------------------------------------------------------------------------------------------

//Início dos comandos do botão "P&R"
    //<null>
    private void buttonPRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonPRActionPerformed
    //Faz o botão P&R ficar Azul ao passar o mouse por cima
    private void buttonPRMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonPRMouseEntered
        // TODO add your handling code here:
        ImageIcon PRAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/IconSynapseAzul.png"));
        buttonPR.setIcon(PRAzul);
    }//GEN-LAST:event_buttonPRMouseEntered
    //Faz o botão P&R voltar a cor padrão ao tirar o mouse de cima
    private void buttonPRMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonPRMouseExited
        // TODO add your handling code here:
        ImageIcon PR = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/IconSynapsePreto.png"));
        buttonPR.setIcon(PR);
    }//GEN-LAST:event_buttonPRMouseExited
//Fim dos comandos do botão "P&R"

//---------------------------------------------------------------------------------------------------------------------------------

//Início dos comandos do botão "Seta"/"Entrar"
    //Altera o icone do botao para "Entrar" quando o mouse passa por cima
    private void buttonSetaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSetaMouseEntered
        // TODO add your handling code here:
        ImageIcon SetaCadastrar = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/EntrarSeta.png"));
        buttonSeta.setIcon(SetaCadastrar);
    }//GEN-LAST:event_buttonSetaMouseEntered
    //Altera o icone do botao de volta para Seta quando o mouse sai do botao
    private void buttonSetaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSetaMouseExited
        // TODO add your handling code here:
        ImageIcon Seta = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/Seta.png"));
        buttonSeta.setIcon(Seta);
    }//GEN-LAST:event_buttonSetaMouseExited
    //executa o metodo abriTela_Login ao clicar no botao
    private void buttonSetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSetaActionPerformed
        try {
            // TODO add your handling code here:
            abrirTela_Login();
        } catch (FontFormatException ex) {
            Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonSetaActionPerformed
//Fim dos comandos do botão "Seta"/"Entrar"

//---------------------------------------------------------------------------------------------------------------------------------
    
//Início dos comandos do botão X para fechar a aplicação
    //Faz com que o botao mude de icone e fique vermelho ao passar o mouse por cima
    private void buttonXTelasMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonXTelasMouseEntered
        // TODO add your handling code here:
        ImageIcon XTelasVerm = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/XFecharTelasVerm.png"));
        buttonXTelas.setIcon(XTelasVerm);
    }//GEN-LAST:event_buttonXTelasMouseEntered
    //Faz com que o botao mude de icone e volte a cor padrao ao tirar o mouse de cima
    private void buttonXTelasMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonXTelasMouseExited
        // TODO add your handling code here:
        ImageIcon XTelas = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/XFecharTelas.png"));
        buttonXTelas.setIcon(XTelas);
    }//GEN-LAST:event_buttonXTelasMouseExited
    //Fecha a aplicação ao apertar no botao X
    private void buttonXTelasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonXTelasActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_buttonXTelasActionPerformed

    private void fieldUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldUserActionPerformed

    private void fieldNascFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldNascFocusGained
        // TODO add your handling code here:
        labelNasc.setVisible(false);
    }//GEN-LAST:event_fieldNascFocusGained

    private void fieldNascFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldNascFocusLost
        // TODO add your handling code here:
        String data = fieldNasc.getText();
        
        if (fieldNasc.getText().equals("__/__/____")) 
        {
            labelNasc.setVisible(true);
            labelTxtNasc.setText("");
            data = null;
        }
        
        if(!validarData(data))
        {
            labelTxtNasc.setText("*Data inválida, informe uma data válida.");           
        }
        else
        {
            labelTxtNasc.setText("");           
        }
    }//GEN-LAST:event_fieldNascFocusLost

    private void buttonOkAlertaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkAlertaMouseEntered
        // TODO add your handling code here:
        buttonOkAlerta.setFont(poppins.deriveFont(25f));
    }//GEN-LAST:event_buttonOkAlertaMouseEntered

    private void buttonOkAlertaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkAlertaMouseExited
        // TODO add your handling code here:
        buttonOkAlerta.setFont(poppins.deriveFont(20f));
    }//GEN-LAST:event_buttonOkAlertaMouseExited

    private void panelAlertaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelAlertaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panelAlertaMouseClicked
//Fim dos comandos do botão X para fechar a aplicação

    public boolean validarData(String data) 
    {
        try {
            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            format.setLenient(false); // Para garantir que a data seja válida
            // Parse da data fornecida
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(format.parse(data)); 

            // Obtém o ano da data fornecida
            int anoData = calendar.get(Calendar.YEAR);
            
            // Obtém o ano atual
            int anoAtual = Calendar.getInstance().get(Calendar.YEAR);
            
            // Verifica se o ano é menor que o ano atual
            if (anoData > anoAtual) {
                return false; // Ano da data é menor que o ano atual
            }
            
            return true; // A data é válida e o ano é igual ou maior que o ano atual
        } catch (ParseException e) {
            return false; // Caso ocorra um erro no parse, a data é inválida
        }
    }
    
//---------------------------------------------------------------------------------------------------------------------------------

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela_Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela_Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela_Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela_Cadastro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Tela_Cadastro().setVisible(true);
                } catch (FontFormatException ex) {
                    Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Tela_Cadastro.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCadastrar;
    private javax.swing.JButton buttonCursos;
    private javax.swing.JButton buttonLogin;
    private javax.swing.JButton buttonOkAlerta;
    private javax.swing.JButton buttonPR;
    private javax.swing.JButton buttonSeta;
    private javax.swing.JButton buttonSobre;
    private javax.swing.JButton buttonSynapse;
    private javax.swing.JButton buttonSynapseLogo;
    private javax.swing.JButton buttonXTelas;
    private javax.swing.JButton buttonXpesq;
    private javax.swing.JCheckBox checkboxSenha;
    private javax.swing.JTextField fieldEmail;
    private javax.swing.JFormattedTextField fieldNasc;
    private javax.swing.JTextField fieldNome;
    private javax.swing.JTextField fieldPesquisa;
    private javax.swing.JPasswordField fieldSenha;
    private javax.swing.JTextField fieldUser;
    private javax.swing.JLabel fundo;
    private javax.swing.JLabel fundoAlerta;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelAlerta;
    private javax.swing.JLabel labelContagem;
    private javax.swing.JLabel labelEmail;
    private javax.swing.JLabel labelNasc;
    private javax.swing.JLabel labelSenha;
    private javax.swing.JLabel labelTxtNasc;
    private javax.swing.JLabel labelUser;
    private javax.swing.JPanel panelAlerta;
    private javax.swing.JPanel panelAlerta2;
    // End of variables declaration//GEN-END:variables
}
