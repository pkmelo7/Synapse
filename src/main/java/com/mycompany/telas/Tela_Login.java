//@author @pkmelo7

package com.mycompany.telas;

//Importações necessárias
import com.mycompany.classes.Session;
import com.mycompany.classes.Usuario;
import com.mycompany.telas.admin.Tela_Admin1;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.SwingConstants;
import javax.swing.Timer;
//Fim das importações necessárias

public class Tela_Login extends javax.swing.JFrame 
{
    //Declaração de variáveis
        //Variáveis para o movimento do logo Synapse
        final int originalX = 10;
        final int targetX = 150;
        final int step = 10;
        Timer timer = new Timer(20, null);
    
        //Variável para determinar se o checkbox que torna a senha visivel esta ativo ou nao
        boolean showing = false;
        
        Timer timerAlerta;
                
        boolean acaoConcluida = false;
    
        //Variaveis para configurar a fonte como poppins
        Font poppins;
        GraphicsEnvironment GE = GraphicsEnvironment.getLocalGraphicsEnvironment();
        
        //Variavel para trazer o icone do projeto
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/icon.png"));
    //Final da declaração de variáveis
    
    //Declaração de métodos
        //cria o método abrirTela_Cadastro, onde invoca a tela de cadastro e fecha a tela de cadastro
        private void abrirTela_Cadastro() throws FontFormatException, IOException
        {
            Tela_Cadastro Tela_Cadastro = new Tela_Cadastro();
            this.dispose();
            Tela_Cadastro.setVisible(true);
        }
        
        //cria o método abrirTela_Menu, onde invoca a tela de menu e fecha a tela atual
        private void abrirTelaMenu() throws FontFormatException, IOException, SQLException
        {
            Tela_Menu TelaMenu = new Tela_Menu();
            this.dispose();
            TelaMenu.setVisible(true);
        }
        
        //cria o método abrirTela_Sobre, onde invoca a tela de sobre e fecha a tela de cadastro
        private void abrirTela_Sobre() throws FontFormatException, IOException, SQLException
        {
            Tela_Sobre Tela_Sobre = new Tela_Sobre();
            this.dispose();
            Tela_Sobre.setVisible(true);
        }
        
        private void abrirTelaAdmin() throws FontFormatException, IOException
        {
            Tela_Admin1 adm = new Tela_Admin1();
            this.dispose();
            adm.setVisible(true);
        }
        
        private void abrirTelaCursos() throws FontFormatException, IOException, SQLException
        {
            Tela_Cursos Cursos = new Tela_Cursos();
            this.dispose();
            Cursos.setVisible(true);
        }
    //Fim da declaração de métodos

    public Tela_Login() throws FontFormatException, IOException {
        //cria a fonte poppins no projeto
        this.poppins = Font.createFont(Font.TRUETYPE_FONT, new File("src/main/resources/fonts/Poppins-Bold.ttf"));
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelAlerta = new javax.swing.JPanel();
        panelAlerta2 = new javax.swing.JPanel();
        labelAlerta = new javax.swing.JLabel();
        buttonOkAlerta = new javax.swing.JButton();
        labelContagem = new javax.swing.JLabel();
        fundoAlerta = new javax.swing.JLabel();
        telaLogin = new javax.swing.JPanel();
        buttonSynapse = new javax.swing.JButton();
        buttonSynapseLogo = new javax.swing.JButton();
        fieldPesquisa = new javax.swing.JTextField();
        buttonXpesq = new javax.swing.JButton();
        buttonSobre = new javax.swing.JButton();
        buttonCursos = new javax.swing.JButton();
        buttonCadastrarse = new javax.swing.JButton();
        fieldUser = new javax.swing.JTextField();
        labelSenha = new javax.swing.JLabel();
        fieldSenha = new javax.swing.JPasswordField();
        checkboxSenha = new javax.swing.JCheckBox();
        buttonSeta = new javax.swing.JButton();
        buttonEntrar = new javax.swing.JButton();
        buttonPR = new javax.swing.JButton();
        buttonXTelas = new javax.swing.JButton();
        labelUser = new javax.swing.JLabel();
        fundo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Synapse Connect");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setIconImage(icon.getImage());
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1366, 750));
        getContentPane().setLayout(null);

        panelAlerta.setOpaque(false);
        panelAlerta.setVisible(false);
        panelAlerta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelAlertaMouseClicked(evt);
            }
        });
        panelAlerta.setLayout(null);

        panelAlerta2.setBackground(new java.awt.Color(204, 204, 204));
        panelAlerta2.setForeground(new java.awt.Color(69, 82, 173));
        panelAlerta2.setLayout(null);

        labelAlerta.setFont(poppins.deriveFont(20f));
        labelAlerta.setForeground(new java.awt.Color(69, 82, 173));
        labelAlerta.setHorizontalAlignment(SwingConstants.CENTER);
        panelAlerta2.add(labelAlerta);
        labelAlerta.setBounds(7, 66, 490, 100);

        buttonOkAlerta.setBackground(new java.awt.Color(0, 0, 0));
        buttonOkAlerta.setFont(poppins.deriveFont(20f));
        buttonOkAlerta.setForeground(new java.awt.Color(69, 82, 173));
        buttonOkAlerta.setText("OK");
        buttonOkAlerta.setBorder(null);
        buttonOkAlerta.setBorderPainted(false);
        buttonOkAlerta.setContentAreaFilled(false);
        buttonOkAlerta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonOkAlerta.setFocusable(false);
        buttonOkAlerta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonOkAlertaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonOkAlertaMouseExited(evt);
            }
        });
        panelAlerta2.add(buttonOkAlerta);
        buttonOkAlerta.setBounds(355, 210, 100, 40);

        labelContagem.setBackground(new java.awt.Color(0, 0, 0));
        labelContagem.setFont(poppins.deriveFont(20f));
        labelContagem.setForeground(new java.awt.Color(69, 82, 173));
        labelContagem.setText("Tempo Restante: 5");
        labelContagem.setHorizontalAlignment(SwingConstants.RIGHT);
        panelAlerta2.add(labelContagem);
        labelContagem.setBounds(87, 210, 260, 40);

        fundoAlerta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/FundosTelas/janelaAlerta.png"))); // NOI18N
        fundoAlerta.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(69, 82, 173), 1, true));
        panelAlerta2.add(fundoAlerta);
        fundoAlerta.setBounds(0, 0, 500, 280);

        panelAlerta.add(panelAlerta2);
        panelAlerta2.setBounds(433, 243, 500, 281);

        getContentPane().add(panelAlerta);
        panelAlerta.setBounds(0, 0, 1366, 768);

        telaLogin.setLayout(null);

        buttonSynapse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/NomeLogo.png"))); // NOI18N
        buttonSynapse.setBorder(null);
        buttonSynapse.setBorderPainted(false);
        buttonSynapse.setContentAreaFilled(false);
        buttonSynapse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSynapse.setFocusPainted(false);
        buttonSynapse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonSynapseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonSynapseMouseExited(evt);
            }
        });
        buttonSynapse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSynapseActionPerformed(evt);
            }
        });
        telaLogin.add(buttonSynapse);
        buttonSynapse.setBounds(30, 0, 260, 160);

        buttonSynapseLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/IconSynapse.png"))); // NOI18N
        buttonSynapseLogo.setBorder(null);
        buttonSynapseLogo.setBorderPainted(false);
        buttonSynapseLogo.setContentAreaFilled(false);
        buttonSynapseLogo.setFocusPainted(false);
        telaLogin.add(buttonSynapseLogo);
        buttonSynapseLogo.setBounds(10, 0, 170, 160);

        fieldPesquisa.setBackground(new java.awt.Color(224, 222, 222));
        fieldPesquisa.setFont(poppins.deriveFont(14f));
        fieldPesquisa.setForeground(new java.awt.Color(128, 128, 128));
        fieldPesquisa.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        fieldPesquisa.setText("Pesquisar:");
        fieldPesquisa.setBorder(null);
        fieldPesquisa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldPesquisaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldPesquisaFocusLost(evt);
            }
        });
        fieldPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldPesquisaActionPerformed(evt);
            }
        });
        telaLogin.add(fieldPesquisa);
        fieldPesquisa.setBounds(380, 50, 380, 50);

        buttonXpesq.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/X.png"))); // NOI18N
        buttonXpesq.setBorder(null);
        buttonXpesq.setBorderPainted(false);
        buttonXpesq.setContentAreaFilled(false);
        buttonXpesq.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonXpesq.setFocusPainted(false);
        buttonXpesq.setMaximumSize(new java.awt.Dimension(86, 19));
        buttonXpesq.setMinimumSize(new java.awt.Dimension(86, 19));
        buttonXpesq.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonXpesqMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonXpesqMouseExited(evt);
            }
        });
        buttonXpesq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonXpesqActionPerformed(evt);
            }
        });
        telaLogin.add(buttonXpesq);
        buttonXpesq.setBounds(780, 60, 40, 30);

        buttonSobre.setFont(poppins.deriveFont(24f));
        buttonSobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/Sobre.png"))); // NOI18N
        buttonSobre.setBorder(null);
        buttonSobre.setBorderPainted(false);
        buttonSobre.setContentAreaFilled(false);
        buttonSobre.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSobre.setFocusPainted(false);
        buttonSobre.setMaximumSize(new java.awt.Dimension(86, 19));
        buttonSobre.setMinimumSize(new java.awt.Dimension(86, 19));
        buttonSobre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonSobreMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonSobreMouseExited(evt);
            }
        });
        buttonSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSobreActionPerformed(evt);
            }
        });
        telaLogin.add(buttonSobre);
        buttonSobre.setBounds(920, 60, 100, 30);

        buttonCursos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/Cursos.png"))); // NOI18N
        buttonCursos.setBorder(null);
        buttonCursos.setBorderPainted(false);
        buttonCursos.setContentAreaFilled(false);
        buttonCursos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonCursos.setFocusPainted(false);
        buttonCursos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonCursosMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonCursosMouseExited(evt);
            }
        });
        buttonCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCursosActionPerformed(evt);
            }
        });
        telaLogin.add(buttonCursos);
        buttonCursos.setBounds(1030, 60, 100, 30);

        buttonCadastrarse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/Cadastrarse.png"))); // NOI18N
        buttonCadastrarse.setBorder(null);
        buttonCadastrarse.setBorderPainted(false);
        buttonCadastrarse.setContentAreaFilled(false);
        buttonCadastrarse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonCadastrarse.setFocusPainted(false);
        buttonCadastrarse.setMaximumSize(new java.awt.Dimension(86, 19));
        buttonCadastrarse.setMinimumSize(new java.awt.Dimension(86, 19));
        buttonCadastrarse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonCadastrarseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonCadastrarseMouseExited(evt);
            }
        });
        buttonCadastrarse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCadastrarseActionPerformed(evt);
            }
        });
        telaLogin.add(buttonCadastrarse);
        buttonCadastrarse.setBounds(1150, 50, 170, 50);

        fieldUser.setBackground(new java.awt.Color(224, 222, 222));
        fieldUser.setFont(poppins.deriveFont(14f));
        fieldUser.setForeground(new java.awt.Color(128, 128, 128));
        fieldUser.setText("Usuário");
        fieldUser.setBorder(null);
        fieldUser.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldUserFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldUserFocusLost(evt);
            }
        });
        fieldUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldUserActionPerformed(evt);
            }
        });
        telaLogin.add(fieldUser);
        fieldUser.setBounds(660, 385, 380, 40);

        labelSenha.setFont(poppins.deriveFont(14f));
        labelSenha.setForeground(new java.awt.Color(128, 128, 128));
        labelSenha.setText("Senha:");
        telaLogin.add(labelSenha);
        labelSenha.setBounds(660, 475, 50, 40);

        fieldSenha.setBackground(new java.awt.Color(224, 222, 222));
        fieldSenha.setFont(poppins.deriveFont(14f));
        fieldSenha.setForeground(new java.awt.Color(128, 128, 128));
        fieldSenha.setBorder(null);
        fieldSenha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldSenhaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldSenhaFocusLost(evt);
            }
        });
        fieldSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldSenhaActionPerformed(evt);
            }
        });
        fieldSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldSenhaKeyReleased(evt);
            }
        });
        telaLogin.add(fieldSenha);
        fieldSenha.setBounds(660, 475, 360, 40);

        checkboxSenha.setBorder(null);
        checkboxSenha.setContentAreaFilled(false);
        checkboxSenha.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkboxSenha.setFocusPainted(false);
        checkboxSenha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/SenhaMostrar.png"))); // NOI18N
        checkboxSenha.setVisible(false);
        checkboxSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxSenhaActionPerformed(evt);
            }
        });
        telaLogin.add(checkboxSenha);
        checkboxSenha.setBounds(1020, 475, 20, 40);

        buttonSeta.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        buttonSeta.setForeground(new java.awt.Color(255, 255, 255));
        buttonSeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/Seta.png"))); // NOI18N
        buttonSeta.setBorder(null);
        buttonSeta.setBorderPainted(false);
        buttonSeta.setContentAreaFilled(false);
        buttonSeta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSeta.setFocusPainted(false);
        buttonSeta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonSetaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonSetaMouseExited(evt);
            }
        });
        buttonSeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSetaActionPerformed(evt);
            }
        });
        telaLogin.add(buttonSeta);
        buttonSeta.setBounds(320, 575, 190, 60);

        buttonEntrar.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        buttonEntrar.setForeground(new java.awt.Color(255, 255, 255));
        buttonEntrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/Entrar.png"))); // NOI18N
        buttonEntrar.setBorder(null);
        buttonEntrar.setBorderPainted(false);
        buttonEntrar.setContentAreaFilled(false);
        buttonEntrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonEntrar.setFocusPainted(false);
        buttonEntrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonEntrarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonEntrarMouseExited(evt);
            }
        });
        buttonEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEntrarActionPerformed(evt);
            }
        });
        telaLogin.add(buttonEntrar);
        buttonEntrar.setBounds(760, 543, 170, 50);

        buttonPR.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        buttonPR.setForeground(new java.awt.Color(255, 255, 255));
        buttonPR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/IconSynapsePreto.png"))); // NOI18N
        buttonPR.setBorder(null);
        buttonPR.setBorderPainted(false);
        buttonPR.setContentAreaFilled(false);
        buttonPR.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonPR.setFocusPainted(false);
        buttonPR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonPRMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonPRMouseExited(evt);
            }
        });
        buttonPR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPRActionPerformed(evt);
            }
        });
        telaLogin.add(buttonPR);
        buttonPR.setBounds(1270, 655, 80, 70);

        buttonXTelas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/XFecharTelas.png"))); // NOI18N
        buttonXTelas.setBorder(null);
        buttonXTelas.setBorderPainted(false);
        buttonXTelas.setContentAreaFilled(false);
        buttonXTelas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonXTelas.setFocusPainted(false);
        buttonXTelas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonXTelasMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonXTelasMouseExited(evt);
            }
        });
        buttonXTelas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonXTelasActionPerformed(evt);
            }
        });
        telaLogin.add(buttonXTelas);
        buttonXTelas.setBounds(1280, 0, 86, 25);

        labelUser.setForeground(new java.awt.Color(204, 0, 0));
        telaLogin.add(labelUser);
        labelUser.setBounds(650, 432, 260, 15);

        fundo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/FundosTelas/FundoLogin.png"))); // NOI18N
        telaLogin.add(fundo);
        fundo.setBounds(0, -17, 1370, 800);

        getContentPane().add(telaLogin);
        telaLogin.setBounds(0, 0, 1366, 768);

        setBounds(-6, 0, 1366, 768);
    }// </editor-fold>//GEN-END:initComponents
    
//---------------------------------------------------------------------------------------------------------------------------------

//Início dos comandos do field "Usuário"
    //<null>
    private void fieldUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldUserActionPerformed
    //Faz com que a palavra "Usuário" desapareça de dentro do field quando o foco é retomado
    private void fieldUserFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldUserFocusGained
        // TODO add your handling code here:
        if (fieldUser.getText().equals("Usuário")) {
            fieldUser.setText("");
            fieldUser.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_fieldUserFocusGained
    //Faz com que a palavra "Usuário" apareça dentro do field quando o foco é perdido
    private void fieldUserFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldUserFocusLost
        // TODO add your handling code here:
        if (fieldUser.getText().isEmpty()) {
            fieldUser.setForeground(Color.GRAY);
            fieldUser.setText("Usuário");
        }
    }//GEN-LAST:event_fieldUserFocusLost
//Fim dos comandos do field "Usuário"

//---------------------------------------------------------------------------------------------------------------------------------

//Início dos comandos do field "Senha"
   //<null>
    private void fieldSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldSenhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldSenhaActionPerformed
    //Faz com que a palavra "Senha" desapareça de dentro do field quando o foco é retomado
    private void fieldSenhaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldSenhaFocusGained
        // TODO add your handling code here:
        if (labelSenha.getText().equals("Senha:")) {
            labelSenha.setText("");
            fieldSenha.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_fieldSenhaFocusGained
    //Faz com que a palavra "Senha" apareça dentro do field quando o foco é perdido
    private void fieldSenhaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldSenhaFocusLost
        // TODO add your handling code here:
        if (labelSenha.getText().isEmpty() || fieldSenha.getText().isEmpty()) {
            labelSenha.setForeground(Color.GRAY);
            labelSenha.setText("Senha:");
        }
    }//GEN-LAST:event_fieldSenhaFocusLost
    //Caso algo seja digitado no fieldSenha, seta o labelSenha como nulo e o checkbox como Mostrar e visível
    //Caso nada seja digitado no fieldSenha ou o que foi digitado no fieldSenha seja apagado, seta o checkbox como invisível
    private void fieldSenhaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldSenhaKeyReleased
        // TODO add your handling code here:
        if (fieldSenha.getPassword().length > 0) 
        {
            labelSenha.setText(" ");
            checkboxSenha.setVisible(true);
            Icon MostrarSenha = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/SenhaMostrar.png"));
            checkboxSenha.setIcon(MostrarSenha);
        }
        else
        {
            checkboxSenha.setVisible(false);
        }   
    }//GEN-LAST:event_fieldSenhaKeyReleased
    //Seta os icons OcultarSenha e MostrarSenha
    //Caso showing = false: seta o field "Senha" como "*" e o checkbox como Ocultar
    //Caso showing = true: seta o field "Senha" como char e o checkbox como Mostrar
    private void checkboxSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxSenhaActionPerformed
        // TODO add your handling code here:
        Icon OcultarSenha = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/SenhaOcultar.png"));
        Icon MostrarSenha = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/SenhaMostrar.png"));
                
        if(showing)
        {
            fieldSenha.setEchoChar('*');
            checkboxSenha.setIcon(MostrarSenha);
        }
        else
        {
            fieldSenha.setEchoChar((char) 0);
            checkboxSenha.setIcon(OcultarSenha);
        }
        showing = !showing;
    }//GEN-LAST:event_checkboxSenhaActionPerformed
//Fim dos comandos do field "Senha"

//---------------------------------------------------------------------------------------------------------------------------------

//Início dos comandos do field "Pesquisar"
    //<null>
    private void fieldPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldPesquisaActionPerformed
    //Faz com que a palavra "Pesquisar" desapareça de dentro do field quando o foco é retomado
    private void fieldPesquisaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldPesquisaFocusGained
        // TODO add your handling code here:
        if (fieldPesquisa.getText().equals("Pesquisar:")) {
            fieldPesquisa.setText("");
            fieldPesquisa.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_fieldPesquisaFocusGained
    //Faz com que a palavra "Pesquisar" apareça dentro do field quando o foco é perdido
    private void fieldPesquisaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldPesquisaFocusLost
        // TODO add your handling code here:
        if (fieldPesquisa.getText().isEmpty()) {
            fieldPesquisa.setForeground(Color.GRAY);
            fieldPesquisa.setText("Pesquisar:");
        }
    }//GEN-LAST:event_fieldPesquisaFocusLost
//Início dos comandos do botão "X" para o field "Pesquisar"
    //Faz com que ao clicar no botão "X", tudo que possa estar escrito dentro do field "Pesquisar" seja apagado e o field seja setado novamente como "Pesquisar" na cor cinza
    private void buttonXpesqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonXpesqActionPerformed
        // TODO add your handling code here:
        fieldPesquisa.setForeground(Color.GRAY);
        fieldPesquisa.setText("Pesquisar:");
    }//GEN-LAST:event_buttonXpesqActionPerformed
    //Faz o botão de X para o field "Pesquisar" ficar Azul ao passar o mouse por cima
    private void buttonXpesqMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonXpesqMouseEntered
        // TODO add your handling code here:
        ImageIcon XpesqAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/XAzul.png"));
        buttonXpesq.setIcon(XpesqAzul);
    }//GEN-LAST:event_buttonXpesqMouseEntered
    //Faz o botão de X para o field "Pesquisar" voltar à cor padrão ao tirar o mouse de cima
    private void buttonXpesqMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonXpesqMouseExited
        // TODO add your handling code here:
        ImageIcon Xpesq = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/X.png"));
        buttonXpesq.setIcon(Xpesq);
    }//GEN-LAST:event_buttonXpesqMouseExited
//Fim dos comandos do botão "X" para o field "Pesquisar"
//Fim dos comandos do field "Pesquisar"
    
//---------------------------------------------------------------------------------------------------------------------------------
   
//Início dos comandos do botão do Logo "Synapse Connect"
    //<null>
    private void buttonSynapseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSynapseActionPerformed
            try {
                // TODO add your handling code here:
                abrirTelaMenu();
            } catch (FontFormatException ex) {
                Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_buttonSynapseActionPerformed
    //Move o Logo "Synapse Connect" à posição final enquanto o mouse estiver em cima
    private void buttonSynapseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSynapseMouseEntered
        // TODO add your handling code here:
        timer.stop();
        timer = new Timer(20, new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                int x = buttonSynapseLogo.getX();
                int y = buttonSynapseLogo.getY();

                if (x < targetX) {
                    buttonSynapseLogo.setLocation(x + step, y);
                }
            }
        });
        timer.start();
    }//GEN-LAST:event_buttonSynapseMouseEntered
    //Move o Logo "Synapse Connect" à posição inicial quando o mouse sair de cima
    private void buttonSynapseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSynapseMouseExited
        // TODO add your handling code here:
        timer.stop();
        timer = new Timer(20, new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                int x = buttonSynapseLogo.getX();
                int y = buttonSynapseLogo.getY();

                if (x > originalX) {
                    buttonSynapseLogo.setLocation(x - step, y);
                }
            }
        });
        timer.start();
    }//GEN-LAST:event_buttonSynapseMouseExited
//Fim dos comandos do botão do Logo "Synapse Connect"

//---------------------------------------------------------------------------------------------------------------------------------
    
//Início dos comandos do botão "Sobre"
    //<null>
    private void buttonSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSobreActionPerformed
            try {
                // TODO add your handling code here:
                abrirTela_Sobre();
            } catch (FontFormatException ex) {
                Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_buttonSobreActionPerformed
    //Faz o botão Sobre ficar Azul ao passar o mouse por cima
    private void buttonSobreMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSobreMouseEntered
        // TODO add your handling code here:
        ImageIcon SobreAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/SobreAzul.png"));
        buttonSobre.setIcon(SobreAzul);
    }//GEN-LAST:event_buttonSobreMouseEntered
    //Faz o botão Sobre voltar à cor padrão ao tirar o mouse de cima
    private void buttonSobreMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSobreMouseExited
        // TODO add your handling code here:
        ImageIcon Sobre = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/Sobre.png"));
        buttonSobre.setIcon(Sobre);
    }//GEN-LAST:event_buttonSobreMouseExited
//Fim dos comandos do botão "Sobre"

//---------------------------------------------------------------------------------------------------------------------------------
  
//Início dos comandos do botão "Cursos"
    //<null>
    private void buttonCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCursosActionPerformed
            try {
                // TODO add your handling code here:
                abrirTelaCursos();
            } catch (FontFormatException ex) {
                Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_buttonCursosActionPerformed
    //Faz o botão Cursos ficar Azul ao passar o mouse por cima
    private void buttonCursosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCursosMouseEntered
        // TODO add your handling code here:
        ImageIcon CursosAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/CursosAzul.png"));
        buttonCursos.setIcon(CursosAzul);
    }//GEN-LAST:event_buttonCursosMouseEntered
    //Faz o botão Sobre voltar à cor padrão ao tirar o mouse de cima
    private void buttonCursosMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCursosMouseExited
        // TODO add your handling code here:
        ImageIcon Cursos = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/Cursos.png"));
        buttonCursos.setIcon(Cursos);
    }//GEN-LAST:event_buttonCursosMouseExited
//Fim dos comandos do botão "Cursos"

//---------------------------------------------------------------------------------------------------------------------------------
 
//Início dos comandos do botão "Cadastrar-se"
    //<null>
    private void buttonCadastrarseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCadastrarseActionPerformed
        try {
            // TODO add your handling code here:
            abrirTela_Cadastro();
        } catch (FontFormatException ex) {
            Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonCadastrarseActionPerformed
    //Faz o botão Cadastrar-se ficar Azul ao passar o mouse por cima
    private void buttonCadastrarseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCadastrarseMouseEntered
        // TODO add your handling code here:
        ImageIcon LoginAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/CadastrarseAzul.png"));
        buttonCadastrarse.setIcon(LoginAzul);
    }//GEN-LAST:event_buttonCadastrarseMouseEntered
    //Faz o botão Cadastrar-se voltar à cor padrão ao tirar o mouse de cima
    private void buttonCadastrarseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCadastrarseMouseExited
        // TODO add your handling code here:
        ImageIcon Login = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/Cadastrarse.png"));
        buttonCadastrarse.setIcon(Login);
    }//GEN-LAST:event_buttonCadastrarseMouseExited
//Fim dos comandos do botão "Cadastrar-se"

//---------------------------------------------------------------------------------------------------------------------------------

//Início dos comandos do botão "Entrar"
    //<null>
    private void buttonEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEntrarActionPerformed
        // TODO add your handling code here:
    String usu = null, senha = null;
    
    if(fieldUser.getText().equals("Usuário") || fieldUser.getText().equals(""))
    {
        labelAlerta.setText("Usuario vazio, por favor preencha.");
        mensagemErro();
    }
    else
    {
        usu = fieldUser.getText();
    }
    
    if(fieldSenha.getText().equals("Senha") || fieldSenha.getText().equals(""))
    {
        labelAlerta.setText("Senha vazia, por favor preencha.");
        mensagemErro();
    }
    else
    {
        senha = fieldSenha.getText();
    }
    
    Usuario usuario = new Usuario();
    usuario.setUser(usu);
    usuario.setSenha(senha);
    
        try 
        {
            int resultado = usuario.validaUser();
        
            if (resultado == 1) 
            {
                int resultadoadmin = usuario.loadAdminStatus();
                // Verifique se o usuário tem privilégios de admin
                if (resultadoadmin == 1)
                {
                    // Setando o usuário como logado na sessão
                    Session.setLoggedUser(usuario);  // Aqui, o usuário é registrado como logado
                    Session.limparCarrinho();
                    abrirTelaAdmin();  // Acesse a tela de admin
                } 
                else 
                {
                    // Setando o usuário como logado na sessão
                    Session.setLoggedUser(usuario);  // Aqui, o usuário é registrado como logado
                    Session.limparCarrinho();
                    abrirTelaMenu();   // Acesse a tela normal
                }
            } 
            else if (resultado == 2) 
            {
                labelAlerta.setText("Senha incorreta, tente novamente.");
                mensagemErro();
            } 
            else 
            {
                if(fieldUser.getText().equals("Usuário") || fieldUser.getText().equals(""))
                {
                    labelAlerta.setText("Usuario vazio, por favor preencha.");
                    mensagemErro();
                }
                else
                {
                    labelAlerta.setText("Usuario não cadastrado, por favor cadastre-se.");
                    mensagemErro2();
                }
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            javax.swing.JOptionPane.showMessageDialog(this, "Erro ao acessar o banco de dados.");
        }   catch (FontFormatException ex) {
                Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_buttonEntrarActionPerformed
    //Faz o botão Entrar ficar Azul ao passar o mouse por cima
    private void buttonEntrarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonEntrarMouseEntered
        // TODO add your handling code here:
        ImageIcon CadastrarAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/EntrarAzul.png"));
        buttonEntrar.setIcon(CadastrarAzul);
    }//GEN-LAST:event_buttonEntrarMouseEntered
    //Faz o botão Entrar voltar a cor padrão ao tirar o mouse de cima
    private void buttonEntrarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonEntrarMouseExited
        // TODO add your handling code here:
        ImageIcon Cadastrar = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/Entrar.png"));
        buttonEntrar.setIcon(Cadastrar);
    }//GEN-LAST:event_buttonEntrarMouseExited
//Fim dos comandos do botão "Entrar"
    
    private void mensagemErro()
    {        
         // Garantir que o painel esteja visível após a exclusão
        panelAlerta.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelAlerta.revalidate();
        panelAlerta.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerAlerta != null && timerAlerta.isRunning()) 
        {
            timerAlerta.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerAlerta = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagem.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagem.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelAlerta.setVisible(false);

                    // Para o Timer
                    timerAlerta.stop();

                    acaoConcluida = true;
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerAlerta.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkAlerta.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerAlerta != null) 
                {
                    timerAlerta.stop();
                }

                // Esconde o painel imediatamente
                panelAlerta.setVisible(false);

                acaoConcluida = true;

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagem.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }
    
     private void mensagemErro2()
    {        
         // Garantir que o painel esteja visível após a exclusão
        panelAlerta.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelAlerta.revalidate();
        panelAlerta.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerAlerta != null && timerAlerta.isRunning()) 
        {
            timerAlerta.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerAlerta = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagem.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagem.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelAlerta.setVisible(false);

                    // Para o Timer
                    timerAlerta.stop();

                    acaoConcluida = true;
                    
                    try {
                        abrirTela_Cadastro();
                    } catch (FontFormatException ex) {
                        Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerAlerta.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkAlerta.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerAlerta != null) 
                {
                    timerAlerta.stop();
                }

                // Esconde o painel imediatamente
                panelAlerta.setVisible(false);

                acaoConcluida = true;
                
                try {
                    abrirTela_Cadastro();
                } catch (FontFormatException ex) {
                    Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
                }

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagem.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }


//---------------------------------------------------------------------------------------------------------------------------------

//Início dos comandos do botão "P&R"
    //<null>
    private void buttonPRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonPRActionPerformed
    //Faz o botão P&R ficar Azul ao passar o mouse por cima
    private void buttonPRMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonPRMouseEntered
        // TODO add your handling code here:
        ImageIcon PRAzul = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/IconSynapseAzul.png"));
        buttonPR.setIcon(PRAzul);
    }//GEN-LAST:event_buttonPRMouseEntered
    //Faz o botão P&R voltar a cor padrão ao tirar o mouse de cima
    private void buttonPRMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonPRMouseExited
        // TODO add your handling code here:
        ImageIcon PR = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/IconSynapsePreto.png"));
        buttonPR.setIcon(PR);
    }//GEN-LAST:event_buttonPRMouseExited
//Fim dos comandos do botão "P&R"
        
//---------------------------------------------------------------------------------------------------------------------------------

//Início dos comandos do botão "Seta"/"Cdastrar-se"
    //Altera o icone do botao para "Cadastrar-se" quando o mouse passa por cima
    private void buttonSetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSetaActionPerformed
        try {
            // TODO add your handling code here:
            abrirTela_Cadastro();
        } catch (FontFormatException ex) {
            Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonSetaActionPerformed
    //Altera o icone do botao de volta para Seta quando o mouse sai do botao
    private void buttonSetaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSetaMouseEntered
        // TODO add your handling code here:
        ImageIcon SetaCadastrar = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/CadastrarseSeta.png"));
        buttonSeta.setIcon(SetaCadastrar);
    }//GEN-LAST:event_buttonSetaMouseEntered
    //executa o metodo abriTela_Login ao clicar no botao
    private void buttonSetaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSetaMouseExited
        // TODO add your handling code here:
        ImageIcon Seta = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/Seta.png"));
        buttonSeta.setIcon(Seta);
    }//GEN-LAST:event_buttonSetaMouseExited
//Fim dos comandos do botão "Seta"/"Cadstrar-se"
    
//---------------------------------------------------------------------------------------------------------------------------------
    
//Início dos comandos do botão X para fechar a aplicação
    //Faz com que o botao mude de icone e fique vermelho ao passar o mouse por cima
    private void buttonXTelasMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonXTelasMouseEntered
        // TODO add your handling code here:
        ImageIcon XTelasVerm = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/XFecharTelasVerm.png"));
        buttonXTelas.setIcon(XTelasVerm);
    }//GEN-LAST:event_buttonXTelasMouseEntered
    //Faz com que o botao mude de icone e volte a cor padrao ao tirar o mouse de cima
    private void buttonXTelasMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonXTelasMouseExited
        // TODO add your handling code here:
        ImageIcon XTelas = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/XFecharTelas.png"));
        buttonXTelas.setIcon(XTelas);
    }//GEN-LAST:event_buttonXTelasMouseExited
    //Fecha a aplicação ao apertar no botao X
    private void buttonXTelasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonXTelasActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_buttonXTelasActionPerformed

    private void buttonOkAlertaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkAlertaMouseEntered
        // TODO add your handling code here:
        buttonOkAlerta.setFont(poppins.deriveFont(25f));
    }//GEN-LAST:event_buttonOkAlertaMouseEntered

    private void buttonOkAlertaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkAlertaMouseExited
        // TODO add your handling code here:
        buttonOkAlerta.setFont(poppins.deriveFont(20f));
    }//GEN-LAST:event_buttonOkAlertaMouseExited

    private void panelAlertaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelAlertaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panelAlertaMouseClicked
//Fim dos comandos do botão X para fechar a aplicação

//---------------------------------------------------------------------------------------------------------------------------------

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela_Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela_Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela_Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela_Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Tela_Login().setVisible(true);
                } catch (FontFormatException ex) {
                    Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Tela_Login.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCadastrarse;
    private javax.swing.JButton buttonCursos;
    private javax.swing.JButton buttonEntrar;
    private javax.swing.JButton buttonOkAlerta;
    private javax.swing.JButton buttonPR;
    private javax.swing.JButton buttonSeta;
    private javax.swing.JButton buttonSobre;
    private javax.swing.JButton buttonSynapse;
    private javax.swing.JButton buttonSynapseLogo;
    private javax.swing.JButton buttonXTelas;
    private javax.swing.JButton buttonXpesq;
    private javax.swing.JCheckBox checkboxSenha;
    private javax.swing.JTextField fieldPesquisa;
    private javax.swing.JPasswordField fieldSenha;
    private javax.swing.JTextField fieldUser;
    private javax.swing.JLabel fundo;
    private javax.swing.JLabel fundoAlerta;
    private javax.swing.JLabel labelAlerta;
    private javax.swing.JLabel labelContagem;
    private javax.swing.JLabel labelSenha;
    private javax.swing.JLabel labelUser;
    private javax.swing.JPanel panelAlerta;
    private javax.swing.JPanel panelAlerta2;
    private javax.swing.JPanel telaLogin;
    // End of variables declaration//GEN-END:variables
}
