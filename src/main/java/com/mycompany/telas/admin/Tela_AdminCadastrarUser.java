//@author @pkmelo7

package com.mycompany.telas.admin;

//Importações necessárias
import com.mycompany.classes.Admin;
import com.mycompany.classes.Usuario;
import com.mycompany.telas.admin.Tela_AdminCadastrar1;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
//Fim das importações necessárias

public class Tela_AdminCadastrarUser extends javax.swing.JFrame {
    
    //Declaração de variáveis 
        //variavel para uso da fonte digital7
        Font digital7;
        GraphicsEnvironment GE = GraphicsEnvironment.getLocalGraphicsEnvironment();
        
        //Variável para determinar se o checkbox que torna a senha visivel esta ativo ou nao
        boolean showing = false;
        
        //Variavel para trazer o icone do projeto
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/icon.png")); 
        
        Usuario usuario = new Usuario();
        Admin adm = new Admin();
        
        MaskFormatter mask;
        
        Timer timerUsu;
        Timer timerData;
        Timer timerUsuEx;
        Timer timerEmailEx;
        Timer timerNomeVz;
        Timer timerNascVz;
        Timer timerUserVz;
        Timer timerEmailVz;
        Timer timerSenhaVz;
        
        boolean acaoConcluida = false;
    //Final da declaração de variáveis
    
    //Declaração de métodos
        
        public void abrirTelaAnterior() throws FontFormatException, IOException
        {
            Tela_AdminCadastrar1 TelaAnterior = new Tela_AdminCadastrar1();
            TelaAnterior.setVisible(true);
            this.dispose();
        }
   
    //Fim da declaração de métodos
        
    public Tela_AdminCadastrarUser() throws FontFormatException, IOException {
        //cria a fonte digital7 no projeto
        this.digital7 = Font.createFont(Font.TRUETYPE_FONT, new File("src/main/resources/fonts/digital-7.ttf"));
        initComponents();
        configurarCampoEmail();
        configurarCampoUser();
        
        try
        {
            mask = new MaskFormatter("##/##/####");
            mask.setPlaceholderCharacter('_');
            fieldNasc.setFormatterFactory(new DefaultFormatterFactory(mask));
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelNomeVazio = new javax.swing.JPanel();
        panelNomeVazio2 = new javax.swing.JPanel();
        labelNomeVazio = new javax.swing.JLabel();
        buttonOkNomeVazio = new javax.swing.JButton();
        labelContagemNomeVazio = new javax.swing.JLabel();
        panelNascVazio = new javax.swing.JPanel();
        panelNascVazio2 = new javax.swing.JPanel();
        labelNascVazio = new javax.swing.JLabel();
        buttonOkNascVazio = new javax.swing.JButton();
        labelContagemNascVazio = new javax.swing.JLabel();
        panelUserVazio = new javax.swing.JPanel();
        panelUserVazio2 = new javax.swing.JPanel();
        labelUserVazio = new javax.swing.JLabel();
        buttonOkUserVazio = new javax.swing.JButton();
        labelContagemUserVazio = new javax.swing.JLabel();
        panelEmailVazio = new javax.swing.JPanel();
        panelEmailVazio2 = new javax.swing.JPanel();
        labelEmailVazio = new javax.swing.JLabel();
        buttonOkEmailVazio = new javax.swing.JButton();
        labelContagemEmailVazio = new javax.swing.JLabel();
        panelSenhaVazia = new javax.swing.JPanel();
        panelSenhaVazia2 = new javax.swing.JPanel();
        labelSenhaVazia = new javax.swing.JLabel();
        buttonOkSenhaVazia = new javax.swing.JButton();
        labelContagemSenhaVazia = new javax.swing.JLabel();
        panelEmailExiste = new javax.swing.JPanel();
        panelEmailExiste2 = new javax.swing.JPanel();
        labelEmailExiste = new javax.swing.JLabel();
        buttonOkEmailExiste = new javax.swing.JButton();
        labelContagemEmailExiste = new javax.swing.JLabel();
        panelUsuExiste = new javax.swing.JPanel();
        panelUsuExiste2 = new javax.swing.JPanel();
        labelUsuExiste = new javax.swing.JLabel();
        buttonOkUsuExiste = new javax.swing.JButton();
        labelContagemUsuExiste = new javax.swing.JLabel();
        panelDataErrada = new javax.swing.JPanel();
        panelDataErrada2 = new javax.swing.JPanel();
        labelDataErrada = new javax.swing.JLabel();
        buttonOkDataErrada = new javax.swing.JButton();
        labelContagemDataErrada = new javax.swing.JLabel();
        panelCadastrado = new javax.swing.JPanel();
        panelCadastrado2 = new javax.swing.JPanel();
        labelCadastrado = new javax.swing.JLabel();
        buttonOkCadastrado = new javax.swing.JButton();
        labelContagemCadastrado = new javax.swing.JLabel();
        panel = new javax.swing.JPanel();
        messageLabel1 = new javax.swing.JLabel();
        telaAdmin = new javax.swing.JPanel();
        buttonVoltar = new javax.swing.JButton();
        buttonCadastrar = new javax.swing.JButton();
        fieldNome = new javax.swing.JTextField();
        labelTxtNasc = new javax.swing.JLabel();
        labelNasc = new javax.swing.JLabel();
        fieldNasc = new javax.swing.JFormattedTextField();
        fieldUser = new javax.swing.JTextField();
        fieldEmail = new javax.swing.JTextField();
        labelSenha = new javax.swing.JLabel();
        checkboxSenha = new javax.swing.JCheckBox();
        fieldSenha = new javax.swing.JPasswordField();
        labelUser = new javax.swing.JLabel();
        labelEmail = new javax.swing.JLabel();
        fundo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Synapse Connect");
        setBackground(new java.awt.Color(224, 222, 222));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setIconImage(icon.getImage());
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1366, 750));
        getContentPane().setLayout(null);

        panelNomeVazio.setOpaque(false);
        panelNomeVazio.setVisible(false);
        panelNomeVazio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelNomeVazioMouseClicked(evt);
            }
        });
        panelNomeVazio.setLayout(null);

        panelNomeVazio2.setBackground(new java.awt.Color(0, 0, 0));
        panelNomeVazio2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 8), 1, true));
        panelNomeVazio2.setForeground(new java.awt.Color(0, 255, 8));
        panelNomeVazio2.setLayout(null);

        labelNomeVazio.setFont(digital7.deriveFont(25f));
        labelNomeVazio.setForeground(new java.awt.Color(0, 255, 8));
        labelNomeVazio.setText("Nome vazio, por favor preencha.");
        labelNomeVazio.setHorizontalAlignment(SwingConstants.CENTER);
        panelNomeVazio2.add(labelNomeVazio);
        labelNomeVazio.setBounds(7, 26, 490, 120);

        buttonOkNomeVazio.setBackground(new java.awt.Color(0, 0, 0));
        buttonOkNomeVazio.setFont(digital7.deriveFont(20f));
        buttonOkNomeVazio.setForeground(new java.awt.Color(0, 255, 8));
        buttonOkNomeVazio.setText("OK");
        buttonOkNomeVazio.setBorder(null);
        buttonOkNomeVazio.setBorderPainted(false);
        buttonOkNomeVazio.setContentAreaFilled(false);
        buttonOkNomeVazio.setFocusable(false);
        buttonOkNomeVazio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonOkNomeVazioMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonOkNomeVazioMouseExited(evt);
            }
        });
        panelNomeVazio2.add(buttonOkNomeVazio);
        buttonOkNomeVazio.setBounds(355, 210, 100, 40);

        labelContagemNomeVazio.setBackground(new java.awt.Color(0, 0, 0));
        labelContagemNomeVazio.setFont(digital7.deriveFont(20f));
        labelContagemNomeVazio.setForeground(new java.awt.Color(0, 255, 8));
        labelContagemNomeVazio.setText("Tempo Restante: 5");
        labelContagemNomeVazio.setHorizontalAlignment(SwingConstants.RIGHT);
        panelNomeVazio2.add(labelContagemNomeVazio);
        labelContagemNomeVazio.setBounds(87, 210, 260, 40);

        panelNomeVazio.add(panelNomeVazio2);
        panelNomeVazio2.setBounds(433, 243, 500, 281);

        getContentPane().add(panelNomeVazio);
        panelNomeVazio.setBounds(0, 0, 1366, 768);

        panelNascVazio.setOpaque(false);
        panelNascVazio.setVisible(false);
        panelNascVazio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelNascVazioMouseClicked(evt);
            }
        });
        panelNascVazio.setLayout(null);

        panelNascVazio2.setBackground(new java.awt.Color(0, 0, 0));
        panelNascVazio2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 8), 1, true));
        panelNascVazio2.setForeground(new java.awt.Color(0, 255, 8));
        panelNascVazio2.setLayout(null);

        labelNascVazio.setFont(digital7.deriveFont(25f));
        labelNascVazio.setForeground(new java.awt.Color(0, 255, 8));
        labelNascVazio.setText("Nascimento vazio, por favor preencha.");
        labelNascVazio.setHorizontalAlignment(SwingConstants.CENTER);
        panelNascVazio2.add(labelNascVazio);
        labelNascVazio.setBounds(7, 26, 490, 120);

        buttonOkNascVazio.setBackground(new java.awt.Color(0, 0, 0));
        buttonOkNascVazio.setFont(digital7.deriveFont(20f));
        buttonOkNascVazio.setForeground(new java.awt.Color(0, 255, 8));
        buttonOkNascVazio.setText("OK");
        buttonOkNascVazio.setBorder(null);
        buttonOkNascVazio.setBorderPainted(false);
        buttonOkNascVazio.setContentAreaFilled(false);
        buttonOkNascVazio.setFocusable(false);
        buttonOkNascVazio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonOkNascVazioMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonOkNascVazioMouseExited(evt);
            }
        });
        panelNascVazio2.add(buttonOkNascVazio);
        buttonOkNascVazio.setBounds(355, 210, 100, 40);

        labelContagemNascVazio.setBackground(new java.awt.Color(0, 0, 0));
        labelContagemNascVazio.setFont(digital7.deriveFont(20f));
        labelContagemNascVazio.setForeground(new java.awt.Color(0, 255, 8));
        labelContagemNascVazio.setText("Tempo Restante: 5");
        labelContagemNascVazio.setHorizontalAlignment(SwingConstants.RIGHT);
        panelNascVazio2.add(labelContagemNascVazio);
        labelContagemNascVazio.setBounds(87, 210, 260, 40);

        panelNascVazio.add(panelNascVazio2);
        panelNascVazio2.setBounds(433, 243, 500, 281);

        getContentPane().add(panelNascVazio);
        panelNascVazio.setBounds(0, 0, 1366, 768);

        panelUserVazio.setOpaque(false);
        panelUserVazio.setVisible(false);
        panelUserVazio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelUserVazioMouseClicked(evt);
            }
        });
        panelUserVazio.setLayout(null);

        panelUserVazio2.setBackground(new java.awt.Color(0, 0, 0));
        panelUserVazio2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 8), 1, true));
        panelUserVazio2.setForeground(new java.awt.Color(0, 255, 8));
        panelUserVazio2.setLayout(null);

        labelUserVazio.setFont(digital7.deriveFont(25f));
        labelUserVazio.setForeground(new java.awt.Color(0, 255, 8));
        labelUserVazio.setText("Usuario vazio, por favor preencha.");
        labelUserVazio.setHorizontalAlignment(SwingConstants.CENTER);
        panelUserVazio2.add(labelUserVazio);
        labelUserVazio.setBounds(7, 26, 490, 120);

        buttonOkUserVazio.setBackground(new java.awt.Color(0, 0, 0));
        buttonOkUserVazio.setFont(digital7.deriveFont(20f));
        buttonOkUserVazio.setForeground(new java.awt.Color(0, 255, 8));
        buttonOkUserVazio.setText("OK");
        buttonOkUserVazio.setBorder(null);
        buttonOkUserVazio.setBorderPainted(false);
        buttonOkUserVazio.setContentAreaFilled(false);
        buttonOkUserVazio.setFocusable(false);
        buttonOkUserVazio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonOkUserVazioMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonOkUserVazioMouseExited(evt);
            }
        });
        panelUserVazio2.add(buttonOkUserVazio);
        buttonOkUserVazio.setBounds(355, 210, 100, 40);

        labelContagemUserVazio.setBackground(new java.awt.Color(0, 0, 0));
        labelContagemUserVazio.setFont(digital7.deriveFont(20f));
        labelContagemUserVazio.setForeground(new java.awt.Color(0, 255, 8));
        labelContagemUserVazio.setText("Tempo Restante: 5");
        labelContagemUserVazio.setHorizontalAlignment(SwingConstants.RIGHT);
        panelUserVazio2.add(labelContagemUserVazio);
        labelContagemUserVazio.setBounds(87, 210, 260, 40);

        panelUserVazio.add(panelUserVazio2);
        panelUserVazio2.setBounds(433, 243, 500, 281);

        getContentPane().add(panelUserVazio);
        panelUserVazio.setBounds(0, 0, 1366, 768);

        panelEmailVazio.setOpaque(false);
        panelEmailVazio.setVisible(false);
        panelEmailVazio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelEmailVazioMouseClicked(evt);
            }
        });
        panelEmailVazio.setLayout(null);

        panelEmailVazio2.setBackground(new java.awt.Color(0, 0, 0));
        panelEmailVazio2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 8), 1, true));
        panelEmailVazio2.setForeground(new java.awt.Color(0, 255, 8));
        panelEmailVazio2.setLayout(null);

        labelEmailVazio.setFont(digital7.deriveFont(25f));
        labelEmailVazio.setForeground(new java.awt.Color(0, 255, 8));
        labelEmailVazio.setText("Email vazio, por favor preencha.");
        labelEmailVazio.setHorizontalAlignment(SwingConstants.CENTER);
        panelEmailVazio2.add(labelEmailVazio);
        labelEmailVazio.setBounds(7, 26, 490, 120);

        buttonOkEmailVazio.setBackground(new java.awt.Color(0, 0, 0));
        buttonOkEmailVazio.setFont(digital7.deriveFont(20f));
        buttonOkEmailVazio.setForeground(new java.awt.Color(0, 255, 8));
        buttonOkEmailVazio.setText("OK");
        buttonOkEmailVazio.setBorder(null);
        buttonOkEmailVazio.setBorderPainted(false);
        buttonOkEmailVazio.setContentAreaFilled(false);
        buttonOkEmailVazio.setFocusable(false);
        buttonOkEmailVazio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonOkEmailVazioMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonOkEmailVazioMouseExited(evt);
            }
        });
        panelEmailVazio2.add(buttonOkEmailVazio);
        buttonOkEmailVazio.setBounds(355, 210, 100, 40);

        labelContagemEmailVazio.setBackground(new java.awt.Color(0, 0, 0));
        labelContagemEmailVazio.setFont(digital7.deriveFont(20f));
        labelContagemEmailVazio.setForeground(new java.awt.Color(0, 255, 8));
        labelContagemEmailVazio.setText("Tempo Restante: 5");
        labelContagemEmailVazio.setHorizontalAlignment(SwingConstants.RIGHT);
        panelEmailVazio2.add(labelContagemEmailVazio);
        labelContagemEmailVazio.setBounds(87, 210, 260, 40);

        panelEmailVazio.add(panelEmailVazio2);
        panelEmailVazio2.setBounds(433, 243, 500, 281);

        getContentPane().add(panelEmailVazio);
        panelEmailVazio.setBounds(0, 0, 1366, 768);

        panelSenhaVazia.setOpaque(false);
        panelSenhaVazia.setVisible(false);
        panelSenhaVazia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelSenhaVaziaMouseClicked(evt);
            }
        });
        panelSenhaVazia.setLayout(null);

        panelSenhaVazia2.setBackground(new java.awt.Color(0, 0, 0));
        panelSenhaVazia2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 8), 1, true));
        panelSenhaVazia2.setForeground(new java.awt.Color(0, 255, 8));
        panelSenhaVazia2.setLayout(null);

        labelSenhaVazia.setFont(digital7.deriveFont(25f));
        labelSenhaVazia.setForeground(new java.awt.Color(0, 255, 8));
        labelSenhaVazia.setText("Senha vazia, por favor preencha.");
        labelSenhaVazia.setHorizontalAlignment(SwingConstants.CENTER);
        panelSenhaVazia2.add(labelSenhaVazia);
        labelSenhaVazia.setBounds(7, 26, 490, 120);

        buttonOkSenhaVazia.setBackground(new java.awt.Color(0, 0, 0));
        buttonOkSenhaVazia.setFont(digital7.deriveFont(20f));
        buttonOkSenhaVazia.setForeground(new java.awt.Color(0, 255, 8));
        buttonOkSenhaVazia.setText("OK");
        buttonOkSenhaVazia.setBorder(null);
        buttonOkSenhaVazia.setBorderPainted(false);
        buttonOkSenhaVazia.setContentAreaFilled(false);
        buttonOkSenhaVazia.setFocusable(false);
        buttonOkSenhaVazia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonOkSenhaVaziaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonOkSenhaVaziaMouseExited(evt);
            }
        });
        panelSenhaVazia2.add(buttonOkSenhaVazia);
        buttonOkSenhaVazia.setBounds(355, 210, 100, 40);

        labelContagemSenhaVazia.setBackground(new java.awt.Color(0, 0, 0));
        labelContagemSenhaVazia.setFont(digital7.deriveFont(20f));
        labelContagemSenhaVazia.setForeground(new java.awt.Color(0, 255, 8));
        labelContagemSenhaVazia.setText("Tempo Restante: 5");
        labelContagemSenhaVazia.setHorizontalAlignment(SwingConstants.RIGHT);
        panelSenhaVazia2.add(labelContagemSenhaVazia);
        labelContagemSenhaVazia.setBounds(87, 210, 260, 40);

        panelSenhaVazia.add(panelSenhaVazia2);
        panelSenhaVazia2.setBounds(433, 243, 500, 281);

        getContentPane().add(panelSenhaVazia);
        panelSenhaVazia.setBounds(0, 0, 1366, 768);

        panelEmailExiste.setOpaque(false);
        panelEmailExiste.setVisible(false);
        panelEmailExiste.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelEmailExisteMouseClicked(evt);
            }
        });
        panelEmailExiste.setLayout(null);

        panelEmailExiste2.setBackground(new java.awt.Color(0, 0, 0));
        panelEmailExiste2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 8), 1, true));
        panelEmailExiste2.setForeground(new java.awt.Color(0, 255, 8));
        panelEmailExiste2.setLayout(null);

        labelEmailExiste.setFont(digital7.deriveFont(25f));
        labelEmailExiste.setForeground(new java.awt.Color(0, 255, 8));
        labelEmailExiste.setText("E-mail ja cadastrado, tente novamente.");
        labelEmailExiste.setHorizontalAlignment(SwingConstants.CENTER);
        panelEmailExiste2.add(labelEmailExiste);
        labelEmailExiste.setBounds(7, 26, 490, 120);

        buttonOkEmailExiste.setBackground(new java.awt.Color(0, 0, 0));
        buttonOkEmailExiste.setFont(digital7.deriveFont(20f));
        buttonOkEmailExiste.setForeground(new java.awt.Color(0, 255, 8));
        buttonOkEmailExiste.setText("OK");
        buttonOkEmailExiste.setBorder(null);
        buttonOkEmailExiste.setBorderPainted(false);
        buttonOkEmailExiste.setContentAreaFilled(false);
        buttonOkEmailExiste.setFocusable(false);
        buttonOkEmailExiste.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonOkEmailExisteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonOkEmailExisteMouseExited(evt);
            }
        });
        panelEmailExiste2.add(buttonOkEmailExiste);
        buttonOkEmailExiste.setBounds(355, 210, 100, 40);

        labelContagemEmailExiste.setBackground(new java.awt.Color(0, 0, 0));
        labelContagemEmailExiste.setFont(digital7.deriveFont(20f));
        labelContagemEmailExiste.setForeground(new java.awt.Color(0, 255, 8));
        labelContagemEmailExiste.setText("Tempo Restante: 5");
        labelContagemEmailExiste.setHorizontalAlignment(SwingConstants.RIGHT);
        panelEmailExiste2.add(labelContagemEmailExiste);
        labelContagemEmailExiste.setBounds(87, 210, 260, 40);

        panelEmailExiste.add(panelEmailExiste2);
        panelEmailExiste2.setBounds(433, 243, 500, 281);

        getContentPane().add(panelEmailExiste);
        panelEmailExiste.setBounds(0, 0, 1366, 768);

        panelUsuExiste.setOpaque(false);
        panelUsuExiste.setVisible(false);
        panelUsuExiste.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelUsuExisteMouseClicked(evt);
            }
        });
        panelUsuExiste.setLayout(null);

        panelUsuExiste2.setBackground(new java.awt.Color(0, 0, 0));
        panelUsuExiste2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 8), 1, true));
        panelUsuExiste2.setForeground(new java.awt.Color(0, 255, 8));
        panelUsuExiste2.setLayout(null);

        labelUsuExiste.setFont(digital7.deriveFont(25f));
        labelUsuExiste.setForeground(new java.awt.Color(0, 255, 8));
        labelUsuExiste.setText("Usuario ja cadastrado, tente novamente.");
        labelUsuExiste.setHorizontalAlignment(SwingConstants.CENTER);
        panelUsuExiste2.add(labelUsuExiste);
        labelUsuExiste.setBounds(7, 26, 490, 120);

        buttonOkUsuExiste.setBackground(new java.awt.Color(0, 0, 0));
        buttonOkUsuExiste.setFont(digital7.deriveFont(20f));
        buttonOkUsuExiste.setForeground(new java.awt.Color(0, 255, 8));
        buttonOkUsuExiste.setText("OK");
        buttonOkUsuExiste.setBorder(null);
        buttonOkUsuExiste.setBorderPainted(false);
        buttonOkUsuExiste.setContentAreaFilled(false);
        buttonOkUsuExiste.setFocusable(false);
        buttonOkUsuExiste.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonOkUsuExisteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonOkUsuExisteMouseExited(evt);
            }
        });
        panelUsuExiste2.add(buttonOkUsuExiste);
        buttonOkUsuExiste.setBounds(355, 210, 100, 40);

        labelContagemUsuExiste.setBackground(new java.awt.Color(0, 0, 0));
        labelContagemUsuExiste.setFont(digital7.deriveFont(20f));
        labelContagemUsuExiste.setForeground(new java.awt.Color(0, 255, 8));
        labelContagemUsuExiste.setText("Tempo Restante: 5");
        labelContagemUsuExiste.setHorizontalAlignment(SwingConstants.RIGHT);
        panelUsuExiste2.add(labelContagemUsuExiste);
        labelContagemUsuExiste.setBounds(87, 210, 260, 40);

        panelUsuExiste.add(panelUsuExiste2);
        panelUsuExiste2.setBounds(433, 243, 500, 281);

        getContentPane().add(panelUsuExiste);
        panelUsuExiste.setBounds(0, 0, 1366, 768);

        panelDataErrada.setOpaque(false);
        panelDataErrada.setVisible(false);
        panelDataErrada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelDataErradaMouseClicked(evt);
            }
        });
        panelDataErrada.setLayout(null);

        panelDataErrada2.setBackground(new java.awt.Color(0, 0, 0));
        panelDataErrada2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 8), 1, true));
        panelDataErrada2.setForeground(new java.awt.Color(0, 255, 8));
        panelDataErrada2.setLayout(null);

        labelDataErrada.setFont(digital7.deriveFont(30f));
        labelDataErrada.setForeground(new java.awt.Color(0, 255, 8));
        labelDataErrada.setText("Data invalida, tente novamente.");
        labelDataErrada.setHorizontalAlignment(SwingConstants.CENTER);
        panelDataErrada2.add(labelDataErrada);
        labelDataErrada.setBounds(7, 26, 490, 120);

        buttonOkDataErrada.setBackground(new java.awt.Color(0, 0, 0));
        buttonOkDataErrada.setFont(digital7.deriveFont(20f));
        buttonOkDataErrada.setForeground(new java.awt.Color(0, 255, 8));
        buttonOkDataErrada.setText("OK");
        buttonOkDataErrada.setBorder(null);
        buttonOkDataErrada.setBorderPainted(false);
        buttonOkDataErrada.setContentAreaFilled(false);
        buttonOkDataErrada.setFocusable(false);
        buttonOkDataErrada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonOkDataErradaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonOkDataErradaMouseExited(evt);
            }
        });
        panelDataErrada2.add(buttonOkDataErrada);
        buttonOkDataErrada.setBounds(355, 210, 100, 40);

        labelContagemDataErrada.setBackground(new java.awt.Color(0, 0, 0));
        labelContagemDataErrada.setFont(digital7.deriveFont(20f));
        labelContagemDataErrada.setForeground(new java.awt.Color(0, 255, 8));
        labelContagemDataErrada.setText("Tempo Restante: 5");
        labelContagemDataErrada.setHorizontalAlignment(SwingConstants.RIGHT);
        panelDataErrada2.add(labelContagemDataErrada);
        labelContagemDataErrada.setBounds(87, 210, 260, 40);

        panelDataErrada.add(panelDataErrada2);
        panelDataErrada2.setBounds(433, 243, 500, 281);

        getContentPane().add(panelDataErrada);
        panelDataErrada.setBounds(0, 0, 1366, 768);

        panelCadastrado.setOpaque(false);
        panelCadastrado.setVisible(false);
        panelCadastrado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelCadastradoMouseClicked(evt);
            }
        });
        panelCadastrado.setLayout(null);

        panelCadastrado2.setBackground(new java.awt.Color(0, 0, 0));
        panelCadastrado2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 8), 1, true));
        panelCadastrado2.setForeground(new java.awt.Color(0, 255, 8));
        panelCadastrado2.setLayout(null);

        labelCadastrado.setFont(digital7.deriveFont(30f));
        labelCadastrado.setForeground(new java.awt.Color(0, 255, 8));
        labelCadastrado.setText("Usuario cadastrado com sucesso.");
        labelCadastrado.setHorizontalAlignment(SwingConstants.CENTER);
        panelCadastrado2.add(labelCadastrado);
        labelCadastrado.setBounds(7, 26, 490, 120);

        buttonOkCadastrado.setBackground(new java.awt.Color(0, 0, 0));
        buttonOkCadastrado.setFont(digital7.deriveFont(20f));
        buttonOkCadastrado.setForeground(new java.awt.Color(0, 255, 8));
        buttonOkCadastrado.setText("OK");
        buttonOkCadastrado.setBorder(null);
        buttonOkCadastrado.setBorderPainted(false);
        buttonOkCadastrado.setContentAreaFilled(false);
        buttonOkCadastrado.setFocusable(false);
        buttonOkCadastrado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonOkCadastradoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonOkCadastradoMouseExited(evt);
            }
        });
        panelCadastrado2.add(buttonOkCadastrado);
        buttonOkCadastrado.setBounds(355, 210, 100, 40);

        labelContagemCadastrado.setBackground(new java.awt.Color(0, 0, 0));
        labelContagemCadastrado.setFont(digital7.deriveFont(20f));
        labelContagemCadastrado.setForeground(new java.awt.Color(0, 255, 8));
        labelContagemCadastrado.setText("Tempo Restante: 5");
        labelContagemCadastrado.setHorizontalAlignment(SwingConstants.RIGHT);
        panelCadastrado2.add(labelContagemCadastrado);
        labelContagemCadastrado.setBounds(87, 210, 260, 40);

        panelCadastrado.add(panelCadastrado2);
        panelCadastrado2.setBounds(433, 243, 500, 281);

        getContentPane().add(panelCadastrado);
        panelCadastrado.setBounds(0, 0, 1366, 768);

        panel.setBackground(new java.awt.Color(0, 0, 0));
        panel.setLayout(null);

        messageLabel1.setBackground(new java.awt.Color(0, 0, 0));
        messageLabel1.setFont(digital7.deriveFont(100f));
        messageLabel1.setForeground(new java.awt.Color(0, 255, 8));
        messageLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        messageLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        String message = "Cadastro de usuarios";
        typingEffect(messageLabel1, message, buttonVoltar, telaAdmin);
        panel.add(messageLabel1);
        messageLabel1.setBounds(0, 0, 1366, 201);

        telaAdmin.setBackground(new java.awt.Color(0, 0, 0));
        telaAdmin.setForeground(new java.awt.Color(0, 0, 0));
        telaAdmin.setVisible(false);
        telaAdmin.setLayout(null);

        buttonVoltar.setBackground(new java.awt.Color(0, 0, 0));
        buttonVoltar.setFont(digital7.deriveFont(50f));
        buttonVoltar.setForeground(new java.awt.Color(0, 255, 8));
        buttonVoltar.setBorder(null);
        buttonVoltar.setBorderPainted(false);
        buttonVoltar.setContentAreaFilled(false);
        buttonVoltar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonVoltar.setFocusPainted(false);
        buttonVoltar.setHorizontalAlignment(SwingConstants.LEFT);
        buttonVoltar.setVisible(false);
        buttonVoltar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonVoltarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonVoltarMouseExited(evt);
            }
        });
        buttonVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVoltarActionPerformed(evt);
            }
        });
        telaAdmin.add(buttonVoltar);
        buttonVoltar.setBounds(16, 700, 240, 60);

        buttonCadastrar.setBackground(new java.awt.Color(0, 0, 0));
        buttonCadastrar.setFont(digital7.deriveFont(75f));
        buttonCadastrar.setForeground(new java.awt.Color(0, 255, 8));
        buttonCadastrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/CadastrarAdmin.png"))); // NOI18N
        buttonCadastrar.setBorder(null);
        buttonCadastrar.setBorderPainted(false);
        buttonCadastrar.setContentAreaFilled(false);
        buttonCadastrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonCadastrar.setFocusPainted(false);
        buttonCadastrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buttonCadastrarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buttonCadastrarMouseExited(evt);
            }
        });
        buttonCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCadastrarActionPerformed(evt);
            }
        });
        telaAdmin.add(buttonCadastrar);
        buttonCadastrar.setBounds(1044, 632, 200, 70);

        fieldNome.setBackground(new java.awt.Color(0, 0, 0));
        fieldNome.setFont(digital7.deriveFont(25f));
        fieldNome.setForeground(new java.awt.Color(0, 178, 6));
        fieldNome.setText("Nome");
        fieldNome.setBorder(null);
        fieldNome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldNomeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldNomeFocusLost(evt);
            }
        });
        telaAdmin.add(fieldNome);
        fieldNome.setBounds(190, 217, 1030, 50);

        labelTxtNasc.setForeground(new java.awt.Color(204, 0, 0));
        telaAdmin.add(labelTxtNasc);
        labelTxtNasc.setBounds(190, 360, 260, 20);

        labelNasc.setBackground(new java.awt.Color(0, 0, 0));
        labelNasc.setFont(digital7.deriveFont(25f));
        labelNasc.setForeground(new java.awt.Color(0, 178, 6));
        labelNasc.setText("Nascimento");
        labelNasc.setOpaque(true);
        telaAdmin.add(labelNasc);
        labelNasc.setBounds(190, 303, 370, 50);

        fieldNasc.setBackground(new java.awt.Color(0, 0, 0));
        fieldNasc.setBorder(null);
        fieldNasc.setForeground(new java.awt.Color(0, 255, 8));
        fieldNasc.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        fieldNasc.setToolTipText("");
        fieldNasc.setFont(digital7.deriveFont(25f));
        fieldNasc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldNascFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldNascFocusLost(evt);
            }
        });
        telaAdmin.add(fieldNasc);
        fieldNasc.setBounds(190, 303, 1030, 50);

        fieldUser.setBackground(new java.awt.Color(0, 0, 0));
        fieldUser.setFont(digital7.deriveFont(25f));
        fieldUser.setForeground(new java.awt.Color(0, 178, 6));
        fieldUser.setText("Usuario");
        fieldUser.setBorder(null);
        telaAdmin.add(fieldUser);
        fieldUser.setBounds(190, 388, 1030, 50);

        fieldEmail.setBackground(new java.awt.Color(0, 0, 0));
        fieldEmail.setFont(digital7.deriveFont(25f));
        fieldEmail.setForeground(new java.awt.Color(0, 178, 6));
        fieldEmail.setText("E-mail");
        fieldEmail.setBorder(null);
        telaAdmin.add(fieldEmail);
        fieldEmail.setBounds(190, 473, 1030, 50);

        labelSenha.setBackground(new java.awt.Color(0, 0, 0));
        labelSenha.setFont(digital7.deriveFont(25f));
        labelSenha.setForeground(new java.awt.Color(0, 178, 6));
        labelSenha.setText("Senha");
        telaAdmin.add(labelSenha);
        labelSenha.setBounds(190, 559, 150, 50);

        checkboxSenha.setBackground(new java.awt.Color(0, 0, 0));
        checkboxSenha.setFont(digital7.deriveFont(25f));
        checkboxSenha.setForeground(new java.awt.Color(0, 255, 8));
        checkboxSenha.setBorder(null);
        checkboxSenha.setContentAreaFilled(false);
        checkboxSenha.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkboxSenha.setFocusPainted(false);
        checkboxSenha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Botoes/SenhaMostrarAdmin.png"))); // NOI18N
        checkboxSenha.setVisible(false);
        checkboxSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxSenhaActionPerformed(evt);
            }
        });
        telaAdmin.add(checkboxSenha);
        checkboxSenha.setBounds(1200, 559, 20, 50);

        fieldSenha.setBackground(new java.awt.Color(0, 0, 0));
        fieldSenha.setFont(digital7.deriveFont(25f));
        fieldSenha.setForeground(new java.awt.Color(0, 255, 8));
        fieldSenha.setBorder(null);
        fieldSenha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldSenhaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldSenhaFocusLost(evt);
            }
        });
        fieldSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldSenhaKeyReleased(evt);
            }
        });
        telaAdmin.add(fieldSenha);
        fieldSenha.setBounds(190, 559, 1030, 50);

        labelUser.setForeground(new java.awt.Color(204, 0, 0));
        telaAdmin.add(labelUser);
        labelUser.setBounds(190, 446, 260, 20);

        labelEmail.setText("Formato: exemplo@dominio.com");
        telaAdmin.add(labelEmail);
        labelEmail.setBounds(190, 526, 320, 30);

        fundo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/FundosTelas/FundoCadastrarAdmin.png"))); // NOI18N
        telaAdmin.add(fundo);
        fundo.setBounds(0, 0, 1366, 768);

        panel.add(telaAdmin);
        telaAdmin.setBounds(0, 0, 1366, 768);

        getContentPane().add(panel);
        panel.setBounds(0, 0, 1366, 768);

        setBounds(-6, 0, 1366, 768);
    }// </editor-fold>//GEN-END:initComponents
//---------------------------------------------------------------------------------------------------------------------------------

//Inicio dos comandos do botao Cursos
    //altera o texto pra frente ao passar o mouse por cima do botao
    private void buttonCadastrarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCadastrarMouseEntered
        // TODO add your handling code here:
        ImageIcon Cadastrar2 = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/CadastrarAdmin2.png"));
        buttonCadastrar.setIcon(Cadastrar2);
    }//GEN-LAST:event_buttonCadastrarMouseEntered
    //altera o texto de volta para a posicao padrao ao tirar o mouse de cima do botao
    private void buttonCadastrarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCadastrarMouseExited
        // TODO add your handling code here:
        ImageIcon Cadastrar = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/CadastrarAdmin.png"));
        buttonCadastrar.setIcon(Cadastrar);
    }//GEN-LAST:event_buttonCadastrarMouseExited
    //<null>
    private void buttonCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCadastrarActionPerformed
        // TODO add your handling code here:
        String nome = null;
        String nasc = null;
        String usu = null; 
        String email = null;
        String senha = null;
        
        if(fieldNome.getText().equals("Nome") || fieldNome.getText().equals(""))
        {
            nomeVazio();
        }
        else
        {
            nome = fieldNome.getText();
        }
        
        if(fieldNasc.getText().equals(""))
        {
            nascVazio();
        }
        else
        {
            if (!validarData(fieldNasc.getText())) 
            {
                dataErrada();
            }
            else
            {
               nasc = fieldNasc.getText();
            }
        }
        
        if(fieldUser.getText().equals("Usuario") || fieldUser.getText().equals(""))
        {
            userVazio();
        }
        else
        {
            usu = fieldUser.getText();
        }
        
        if(fieldEmail.getText().equals("E-mail") || fieldEmail.getText().equals(""))
        {
            emailVazio();
        }
        else
        {
            email = fieldEmail.getText();
        }
        
        if(fieldSenha.getText().equals("Senha") || fieldSenha.getText().equals(""))
        {
            senhaVazia();
        }
        else
        {
            senha = fieldSenha.getText();
        }
        
        usuario.setNome(nome);
        usuario.setDtnasc(nasc);
        usuario.setUser(usu);
        usuario.setEmail(email);
        usuario.setSenha(senha);
        
        try 
        {
            // Verifica se o usuário ou email já existem
            if (usuario.verificaUserExiste()) 
            {
                usuExiste();
            }
            else if(usuario.verificaEmailExiste())
            {
                emailExiste();
            }
            else 
            {
                // Cadastra o novo usuário
                if (usuario.cadastraUser()) 
                {
                   usuCadastrado();
                }
                else
                {
                    System.out.println("Erro ao cadastar");
                }
            }
        }
        catch (SQLException e) 
        {
            e.printStackTrace();
            System.out.println("Erro ao acessar o banco de dados.");
        }
        
             
    }//GEN-LAST:event_buttonCadastrarActionPerformed

    private void usuCadastrado()
    {
         // Garantir que o painel esteja visível após a exclusão
        panelCadastrado.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelCadastrado.revalidate();
        panelCadastrado.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerUsu != null && timerUsu.isRunning()) 
        {
            timerUsu.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerUsu = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagemCadastrado.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagemCadastrado.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelCadastrado.setVisible(false);

                    // Para o Timer
                    timerUsu.stop();

                    acaoConcluida = true;
                    
                    // Limpar os campos de texto após o painel desaparecer
                    limparCampos();
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerUsu.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkCadastrado.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerUsu != null) 
                {
                    timerUsu.stop();
                }

                // Esconde o painel imediatamente
                panelCadastrado.setVisible(false);

                acaoConcluida = true;
                
                 // Limpar os campos de texto após o painel desaparecer
                limparCampos();

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagemCadastrado.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }
    
    private void dataErrada()
    {
         // Garantir que o painel esteja visível após a exclusão
        panelDataErrada.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelDataErrada.revalidate();
        panelDataErrada.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerData != null && timerData.isRunning()) 
        {
            timerData.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerData = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagemDataErrada.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagemDataErrada.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelDataErrada.setVisible(false);

                    // Para o Timer
                    timerData.stop();

                    acaoConcluida = true;
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerData.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkDataErrada.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerData != null) 
                {
                    timerData.stop();
                }

                // Esconde o painel imediatamente
                panelDataErrada.setVisible(false);

                acaoConcluida = true;

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagemDataErrada.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }
    
    private void usuExiste()
    {
         // Garantir que o painel esteja visível após a exclusão
        panelUsuExiste.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelUsuExiste.revalidate();
        panelUsuExiste.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerUsuEx != null && timerUsuEx.isRunning()) 
        {
            timerUsuEx.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerUsuEx = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagemUsuExiste.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagemUsuExiste.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelUsuExiste.setVisible(false);

                    // Para o Timer
                    timerUsuEx.stop();

                    acaoConcluida = true;
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerUsuEx.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkUsuExiste.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerUsuEx != null) 
                {
                    timerUsuEx.stop();
                }

                // Esconde o painel imediatamente
                panelUsuExiste.setVisible(false);

                acaoConcluida = true;

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagemUsuExiste.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }
    
    private void emailExiste()
    {
         // Garantir que o painel esteja visível após a exclusão
        panelEmailExiste.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelEmailExiste.revalidate();
        panelEmailExiste.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerEmailEx != null && timerEmailEx.isRunning()) 
        {
            timerEmailEx.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerEmailEx = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagemEmailExiste.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagemEmailExiste.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelEmailExiste.setVisible(false);

                    // Para o Timer
                    timerEmailEx.stop();

                    acaoConcluida = true;
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerEmailEx.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkEmailExiste.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerEmailEx != null) 
                {
                    timerEmailEx.stop();
                }

                // Esconde o painel imediatamente
                panelEmailExiste.setVisible(false);

                acaoConcluida = true;

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagemEmailExiste.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }
    
    private void nomeVazio()
    {
         // Garantir que o painel esteja visível após a exclusão
        panelNomeVazio.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelNomeVazio.revalidate();
        panelNomeVazio.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerNomeVz != null && timerNomeVz.isRunning()) 
        {
            timerNomeVz.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerNomeVz = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagemNomeVazio.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagemNomeVazio.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelNomeVazio.setVisible(false);

                    // Para o Timer
                    timerNomeVz.stop();

                    acaoConcluida = true;
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerNomeVz.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkNomeVazio.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerNomeVz != null) 
                {
                    timerNomeVz.stop();
                }

                // Esconde o painel imediatamente
                panelNomeVazio.setVisible(false);

                acaoConcluida = true;

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagemNomeVazio.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }
    
    private void nascVazio()
    {
         // Garantir que o painel esteja visível após a exclusão
        panelNascVazio.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelNascVazio.revalidate();
        panelNascVazio.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerNascVz != null && timerNascVz.isRunning()) 
        {
            timerNascVz.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerNascVz = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagemNascVazio.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagemNascVazio.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelNascVazio.setVisible(false);

                    // Para o Timer
                    timerNascVz.stop();

                    acaoConcluida = true;
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerNascVz.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkNascVazio.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerNascVz != null) 
                {
                    timerNascVz.stop();
                }

                // Esconde o painel imediatamente
                panelNascVazio.setVisible(false);

                acaoConcluida = true;

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagemNascVazio.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }
    
    private void userVazio()
    {
         // Garantir que o painel esteja visível após a exclusão
        panelUserVazio.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelUserVazio.revalidate();
        panelUserVazio.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerUserVz != null && timerUserVz.isRunning()) 
        {
            timerUserVz.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerUserVz = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagemUserVazio.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagemUserVazio.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelUserVazio.setVisible(false);

                    // Para o Timer
                    timerUserVz.stop();

                    acaoConcluida = true;
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerUserVz.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkUserVazio.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerUserVz != null) 
                {
                    timerUserVz.stop();
                }

                // Esconde o painel imediatamente
                panelUserVazio.setVisible(false);

                acaoConcluida = true;

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagemUserVazio.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }
    
    private void emailVazio()
    {
         // Garantir que o painel esteja visível após a exclusão
        panelEmailVazio.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelEmailVazio.revalidate();
        panelEmailVazio.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerEmailVz != null && timerEmailVz.isRunning()) 
        {
            timerEmailVz.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerEmailVz = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagemEmailVazio.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagemEmailVazio.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelEmailVazio.setVisible(false);

                    // Para o Timer
                    timerEmailVz.stop();

                    acaoConcluida = true;
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerEmailVz.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkEmailVazio.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerEmailVz != null) 
                {
                    timerEmailVz.stop();
                }

                // Esconde o painel imediatamente
                panelEmailVazio.setVisible(false);

                acaoConcluida = true;

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagemEmailVazio.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }
    
    private void senhaVazia()
    {
         // Garantir que o painel esteja visível após a exclusão
        panelSenhaVazia.setVisible(true);

        // Revalide o layout para garantir que o painel seja renderizado corretamente
        panelSenhaVazia.revalidate();
        panelSenhaVazia.repaint();

        // Definir tempo inicial da contagem regressiva
        final int tempoInicial = 5;
        final int[] tempoRestante = {tempoInicial}; // Usamos um array para poder alterar o valor dentro do Timer

        // **Cancelar o Timer anterior, se houver** (importante para a segunda, terceira exclusão, etc.)
        if (timerSenhaVz != null && timerSenhaVz.isRunning()) 
        {
            timerSenhaVz.stop();  // Para o Timer atual, se já estiver em execução
        }

        // Criar o Timer para a contagem regressiva
        timerSenhaVz = new Timer(1000, new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Atualiza o texto da contagem regressiva
                if (tempoRestante[0] > 0) 
                {
                    tempoRestante[0]--;
                    labelContagemSenhaVazia.setText("Tempo restante: " + tempoRestante[0]);
                } 
                else
                {
                    // Quando a contagem chega a 0, reinicia o tempo
                    tempoRestante[0] = tempoInicial; // Reinicia para 5 segundos
                    labelContagemSenhaVazia.setText("Tempo restante: " + tempoRestante[0]);

                    // Esconde o painel após a contagem
                    panelSenhaVazia.setVisible(false);

                    // Para o Timer
                    timerSenhaVz.stop();

                    acaoConcluida = true;
                }
            }
        });

        // Inicia o Timer de contagem regressiva
        timerSenhaVz.start();

        // Ação do botão "OK" para fechar o painel antes do tempo
        buttonOkSenhaVazia.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Para o Timer imediatamente
                if (timerSenhaVz != null) 
                {
                    timerSenhaVz.stop();
                }

                // Esconde o painel imediatamente
                panelSenhaVazia.setVisible(false);

                acaoConcluida = true;

                // Opcional: Resetar a contagem se necessário (reiniciar a contagem para o próximo uso)
                tempoRestante[0] = tempoInicial; // Reinicia a contagem
                labelContagemSenhaVazia.setText("Tempo restante: " + tempoRestante[0]);
            }
        });
    }
    
    private void limparCampos() 
    {
        fieldNome.setText("Nome");
        fieldNome.setForeground(new Color(0,178,6));
        fieldNasc.setText("");
        labelNasc.setVisible(true);
        fieldUser.setText("Usuario");
        fieldUser.setForeground(new Color(0,178,6));
        labelUser.setText("");
        fieldEmail.setText("E-mail");
        fieldSenha.setText("");
        labelSenha.setText("Senha");
    }

//Fim dos comandos do botao Cursos

//---------------------------------------------------------------------------------------------------------------------------------


    private void buttonVoltarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonVoltarMouseEntered
        // TODO add your handling code here:
        if(buttonVoltar.getText().equals("<-- Voltar"))
            buttonVoltar.setText("<--  Voltar");
    }//GEN-LAST:event_buttonVoltarMouseEntered

    private void buttonVoltarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonVoltarMouseExited
        // TODO add your handling code here:
        if (buttonVoltar.getText().equals("<--  Voltar"))
            buttonVoltar.setText("<-- Voltar");
    }//GEN-LAST:event_buttonVoltarMouseExited

    private void buttonVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVoltarActionPerformed
            try {
                // TODO add your handling code here:
                abrirTelaAnterior();
            } catch (FontFormatException ex) {
                Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_buttonVoltarActionPerformed

    private void fieldNomeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldNomeFocusGained
        // TODO add your handling code here:
        if (fieldNome.getText().equals("Nome")) {
            fieldNome.setText("");
            fieldNome.setForeground(new Color(0,255,8));
        }
    }//GEN-LAST:event_fieldNomeFocusGained

    private void fieldNomeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldNomeFocusLost
        // TODO add your handling code here:
        if (fieldNome.getText().isEmpty()) {
            fieldNome.setForeground(new Color(0,178,6));
            fieldNome.setText("Nome");
        }
    }//GEN-LAST:event_fieldNomeFocusLost
     
    private void configurarCampoUser() {
       // Adicionar um ouvinte de foco para limpar e restaurar o texto de placeholder
        fieldUser.addFocusListener(new FocusListener() 
        {
            public void focusGained(FocusEvent e) 
            {
                // Quando o campo recebe foco, limpar o texto (se for o placeholder)
                if (fieldUser.getText().equals("Usuario")) 
                {
                    fieldUser.setText("");
                    fieldUser.setForeground(new Color(0, 255, 8)); // Cor verde, por exemplo
                }
            }

            public void focusLost(FocusEvent e) 
            {
                if (fieldUser.getText().isEmpty()) 
                {
                    fieldUser.setForeground(new Color(0,178,6));
                    fieldUser.setText("Usuario");
                    labelUser.setText("");
                }
                else
                {  
                    String usu = fieldUser.getText();
                    usuario.setUser(usu);
                    try 
                    {
                        if(usuario.verificaUserExiste())
                        {
                            labelUser.setText("*Usuario já cadastrado");
                            labelUser.setForeground(Color.red);
                        }
                        else
                        {
                            labelUser.setText("*Usuario válido");
                            labelUser.setForeground(new Color(0,255,8));
                        }
                    } 
                    catch (SQLException ex) 
                    {
                        Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }
    
    private void configurarCampoEmail() 
    {
        // Texto placeholder
        fieldEmail.setText("E-mail");
        fieldEmail.setForeground(new Color(0,178,6)); // Cor mais suave para o placeholder

        // Inicializar o JLabel com o texto inicial de formato
        labelEmail.setText("Formato: exemplo@dominio.com");
        labelEmail.setForeground(new Color(153, 153, 153)); // Cor mais suave para o formato
      
        // Adicionar um ouvinte de foco para limpar e restaurar o texto de placeholder
        fieldEmail.addFocusListener(new FocusListener() 
        {
            public void focusGained(FocusEvent e) 
            {
                // Quando o campo recebe foco, limpar o texto (se for o placeholder)
                if (fieldEmail.getText().equals("E-mail")) 
                {
                    fieldEmail.setText("");
                    fieldEmail.setForeground(new Color(0, 255, 8)); // Cor verde, por exemplo
                }
            }

            public void focusLost(FocusEvent e) {
                // Se o campo estiver vazio, restaurar o texto de placeholder
                if (fieldEmail.getText().isEmpty()) {
                    fieldEmail.setText("E-mail");
                    fieldEmail.setForeground(new Color(0,178,6)); // Cor mais suave para o placeholder
                    labelEmail.setText("Formato: exemplo@dominio.com"); // Exibir o formato padrão
                    labelEmail.setForeground(new Color(153, 153, 153)); // Cor suave
                } 
                else 
                {
                    // Se o campo não estiver vazio, validação de formato
                    if (!validarEmail(fieldEmail.getText())) 
                    {
                        labelEmail.setText("Formato de e-mail inválido! Use exemplo@dominio.com.");
                        labelEmail.setForeground(Color.RED); // Cor vermelha para erro
                    } 
                    else
                    {
                        String email = fieldEmail.getText();
                        usuario.setEmail(email);
                        try 
                        {
                            if(usuario.verificaEmailExiste())
                            {
                                labelEmail.setText("*E-mail já cadastrado");
                                labelEmail.setForeground(Color.RED);
                            }
                            else
                            {   
                                labelEmail.setText("*E-mail válido");
                                labelEmail.setForeground(new Color(0,255,8));
                            }
                        }
                        catch (SQLException ex) 
                        {
                            Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        });
    }
 
    private boolean validarEmail(String email)
    {
        return email.matches("[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}");
    }
    
    
    private void fieldSenhaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldSenhaFocusGained
        // TODO add your handling code here:
        if (labelSenha.getText().equals("Senha")) {
            labelSenha.setText("");
            fieldSenha.setForeground(new Color(0,255,8));
        }
    }//GEN-LAST:event_fieldSenhaFocusGained

    private void fieldSenhaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldSenhaFocusLost
        // TODO add your handling code here:
        if (labelSenha.getText().isEmpty() || fieldSenha.getText().isEmpty()) {
            labelSenha.setForeground(new Color(0,178,6));
            labelSenha.setText("Senha");
        }
    }//GEN-LAST:event_fieldSenhaFocusLost

    private void fieldSenhaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldSenhaKeyReleased
        // TODO add your handling code here:
        if (fieldSenha.getPassword().length > 0)
        {
            labelSenha.setText(" ");
            checkboxSenha.setVisible(true);
            Icon MostrarSenha = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/SenhaMostrarAdmin.png"));
            checkboxSenha.setIcon(MostrarSenha);
        }
        else
        {
            checkboxSenha.setVisible(false);
        }
    }//GEN-LAST:event_fieldSenhaKeyReleased

    private void checkboxSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxSenhaActionPerformed
        // TODO add your handling code here:
        Icon OcultarSenha = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/SenhaOcultarAdmin.png"));
        Icon MostrarSenha = new ImageIcon(getClass().getClassLoader().getResource("images/Botoes/SenhaMostrarAdmin.png"));

        if(showing)
        {
            fieldSenha.setEchoChar('*');
            checkboxSenha.setIcon(MostrarSenha);
        }
        else
        {
            fieldSenha.setEchoChar((char) 0);
            checkboxSenha.setIcon(OcultarSenha);
        }
        showing = !showing;
    }//GEN-LAST:event_checkboxSenhaActionPerformed

    private void fieldNascFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldNascFocusGained
        // TODO add your handling code here:
        labelNasc.setVisible(false);
    }//GEN-LAST:event_fieldNascFocusGained

    private void fieldNascFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldNascFocusLost
        // TODO add your handling code here:
        String data = fieldNasc.getText();
        
        if (fieldNasc.getText().equals("__/__/____")) 
        {
            labelNasc.setVisible(true);
            labelTxtNasc.setText("");
            data = null;
        }
        
        if(!validarData(data))
        {
            labelTxtNasc.setText("*Data inválida, informe uma data válida.");           
        }
        else
        {
            labelTxtNasc.setText("");           
        }
    }//GEN-LAST:event_fieldNascFocusLost

    private void buttonOkCadastradoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkCadastradoMouseEntered
        // TODO add your handling code here:
        buttonOkCadastrado.setFont(digital7.deriveFont(25f));
    }//GEN-LAST:event_buttonOkCadastradoMouseEntered

    private void buttonOkCadastradoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkCadastradoMouseExited
        // TODO add your handling code here:
        buttonOkCadastrado.setFont(digital7.deriveFont(20f));
    }//GEN-LAST:event_buttonOkCadastradoMouseExited

    private void panelCadastradoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelCadastradoMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_panelCadastradoMouseClicked

    private void panelDataErradaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDataErradaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panelDataErradaMouseClicked

    private void buttonOkDataErradaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkDataErradaMouseEntered
        // TODO add your handling code here:
        buttonOkDataErrada.setFont(digital7.deriveFont(25f));
    }//GEN-LAST:event_buttonOkDataErradaMouseEntered

    private void buttonOkDataErradaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkDataErradaMouseExited
        // TODO add your handling code here:
        buttonOkDataErrada.setFont(digital7.deriveFont(20f));
    }//GEN-LAST:event_buttonOkDataErradaMouseExited

    private void buttonOkUsuExisteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkUsuExisteMouseEntered
        // TODO add your handling code here:
        buttonOkUsuExiste.setFont(digital7.deriveFont(25f));
    }//GEN-LAST:event_buttonOkUsuExisteMouseEntered

    private void buttonOkUsuExisteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkUsuExisteMouseExited
        // TODO add your handling code here:
        buttonOkUsuExiste.setFont(digital7.deriveFont(20f));
    }//GEN-LAST:event_buttonOkUsuExisteMouseExited

    private void panelUsuExisteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelUsuExisteMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panelUsuExisteMouseClicked

    private void buttonOkEmailExisteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkEmailExisteMouseEntered
        // TODO add your handling code here:
        buttonOkEmailExiste.setFont(digital7.deriveFont(25f));
    }//GEN-LAST:event_buttonOkEmailExisteMouseEntered

    private void buttonOkEmailExisteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkEmailExisteMouseExited
        // TODO add your handling code here:
        buttonOkEmailExiste.setFont(digital7.deriveFont(20f));
    }//GEN-LAST:event_buttonOkEmailExisteMouseExited

    private void panelEmailExisteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelEmailExisteMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panelEmailExisteMouseClicked

    private void buttonOkSenhaVaziaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkSenhaVaziaMouseEntered
        // TODO add your handling code here:
        buttonOkSenhaVazia.setFont(digital7.deriveFont(25f));
    }//GEN-LAST:event_buttonOkSenhaVaziaMouseEntered

    private void buttonOkSenhaVaziaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkSenhaVaziaMouseExited
        // TODO add your handling code here:
        buttonOkSenhaVazia.setFont(digital7.deriveFont(20f));
    }//GEN-LAST:event_buttonOkSenhaVaziaMouseExited

    private void panelSenhaVaziaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelSenhaVaziaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panelSenhaVaziaMouseClicked

    private void buttonOkEmailVazioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkEmailVazioMouseEntered
        // TODO add your handling code here:
        buttonOkEmailVazio.setFont(digital7.deriveFont(25f));
    }//GEN-LAST:event_buttonOkEmailVazioMouseEntered

    private void buttonOkEmailVazioMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkEmailVazioMouseExited
        // TODO add your handling code here:
        buttonOkEmailVazio.setFont(digital7.deriveFont(20f));
    }//GEN-LAST:event_buttonOkEmailVazioMouseExited

    private void panelEmailVazioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelEmailVazioMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panelEmailVazioMouseClicked

    private void buttonOkUserVazioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkUserVazioMouseEntered
        // TODO add your handling code here:
        buttonOkUserVazio.setFont(digital7.deriveFont(25f));
    }//GEN-LAST:event_buttonOkUserVazioMouseEntered

    private void buttonOkUserVazioMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkUserVazioMouseExited
        // TODO add your handling code here:
        buttonOkUserVazio.setFont(digital7.deriveFont(20f));
    }//GEN-LAST:event_buttonOkUserVazioMouseExited

    private void panelUserVazioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelUserVazioMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panelUserVazioMouseClicked

    private void buttonOkNascVazioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkNascVazioMouseEntered
        // TODO add your handling code here:
        buttonOkNascVazio.setFont(digital7.deriveFont(25f));
    }//GEN-LAST:event_buttonOkNascVazioMouseEntered

    private void buttonOkNascVazioMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkNascVazioMouseExited
        // TODO add your handling code here:
        buttonOkNascVazio.setFont(digital7.deriveFont(20f));
    }//GEN-LAST:event_buttonOkNascVazioMouseExited

    private void panelNascVazioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelNascVazioMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panelNascVazioMouseClicked

    private void buttonOkNomeVazioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkNomeVazioMouseEntered
        // TODO add your handling code here:
        buttonOkNomeVazio.setFont(digital7.deriveFont(25f));
    }//GEN-LAST:event_buttonOkNomeVazioMouseEntered

    private void buttonOkNomeVazioMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonOkNomeVazioMouseExited
        // TODO add your handling code here:
        buttonOkNomeVazio.setFont(digital7.deriveFont(20f));
    }//GEN-LAST:event_buttonOkNomeVazioMouseExited

    private void panelNomeVazioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelNomeVazioMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_panelNomeVazioMouseClicked

    public boolean validarData(String data) 
    {
        try {
            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            format.setLenient(false); // Para garantir que a data seja válida
            // Parse da data fornecida
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(format.parse(data)); 

            // Obtém o ano da data fornecida
            int anoData = calendar.get(Calendar.YEAR);
            
            // Obtém o ano atual
            int anoAtual = Calendar.getInstance().get(Calendar.YEAR);
            
            // Verifica se o ano é menor que o ano atual
            if (anoData > anoAtual) {
                return false; // Ano da data é menor que o ano atual
            }
            
            return true; // A data é válida e o ano é igual ou maior que o ano atual
        } catch (ParseException e) {
            return false; // Caso ocorra um erro no parse, a data é inválida
        }
    }
//---------------------------------------------------------------------------------------------------------------------------------

//metodos typpingEffect para criar o efeito das mensagens serem escritas
private static void typingEffect(JLabel label, String message, JButton bt1, JPanel panel) 
{
    Timer timer = new Timer(25, new ActionListener() 
    {
        private int index = 0;

        @Override
        public void actionPerformed(ActionEvent e) 
        {
            if (index < message.length()) 
            {
                label.setText(label.getText() + message.charAt(index));
                index++;
            }
            else 
            {
                ((Timer) e.getSource()).stop();
                panel.setVisible(true);
                bt1.setVisible(true);
                typingEffect(bt1, "<-- Voltar"); 
            }
        }
    });
    timer.start();
}

private static void typingEffect(JButton button, String message) 
{
    button.setText("");
    
    Timer timer = new Timer(25, new ActionListener() 
    {
        private int index = 0;

        @Override
        public void actionPerformed(ActionEvent e) 
        {
            if (index < message.length()) 
            {
                button.setText(button.getText() + message.charAt(index));
                index++;
            }
            else
            {
                ((Timer) e.getSource()).stop();
            }
        }
    });
    timer.start();
}


//---------------------------------------------------------------------------------------------------------------------------------

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Tela_AdminCadastrarUser().setVisible(true);
                } catch (FontFormatException ex) {
                    Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Tela_AdminCadastrarUser.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCadastrar;
    private javax.swing.JButton buttonOkCadastrado;
    private javax.swing.JButton buttonOkDataErrada;
    private javax.swing.JButton buttonOkEmailExiste;
    private javax.swing.JButton buttonOkEmailVazio;
    private javax.swing.JButton buttonOkNascVazio;
    private javax.swing.JButton buttonOkNomeVazio;
    private javax.swing.JButton buttonOkSenhaVazia;
    private javax.swing.JButton buttonOkUserVazio;
    private javax.swing.JButton buttonOkUsuExiste;
    private javax.swing.JButton buttonVoltar;
    private javax.swing.JCheckBox checkboxSenha;
    private javax.swing.JTextField fieldEmail;
    private javax.swing.JFormattedTextField fieldNasc;
    private javax.swing.JTextField fieldNome;
    private javax.swing.JPasswordField fieldSenha;
    private javax.swing.JTextField fieldUser;
    private javax.swing.JLabel fundo;
    private javax.swing.JLabel labelCadastrado;
    private javax.swing.JLabel labelContagemCadastrado;
    private javax.swing.JLabel labelContagemDataErrada;
    private javax.swing.JLabel labelContagemEmailExiste;
    private javax.swing.JLabel labelContagemEmailVazio;
    private javax.swing.JLabel labelContagemNascVazio;
    private javax.swing.JLabel labelContagemNomeVazio;
    private javax.swing.JLabel labelContagemSenhaVazia;
    private javax.swing.JLabel labelContagemUserVazio;
    private javax.swing.JLabel labelContagemUsuExiste;
    private javax.swing.JLabel labelDataErrada;
    private javax.swing.JLabel labelEmail;
    private javax.swing.JLabel labelEmailExiste;
    private javax.swing.JLabel labelEmailVazio;
    private javax.swing.JLabel labelNasc;
    private javax.swing.JLabel labelNascVazio;
    private javax.swing.JLabel labelNomeVazio;
    private javax.swing.JLabel labelSenha;
    private javax.swing.JLabel labelSenhaVazia;
    private javax.swing.JLabel labelTxtNasc;
    private javax.swing.JLabel labelUser;
    private javax.swing.JLabel labelUserVazio;
    private javax.swing.JLabel labelUsuExiste;
    private javax.swing.JLabel messageLabel1;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panelCadastrado;
    private javax.swing.JPanel panelCadastrado2;
    private javax.swing.JPanel panelDataErrada;
    private javax.swing.JPanel panelDataErrada2;
    private javax.swing.JPanel panelEmailExiste;
    private javax.swing.JPanel panelEmailExiste2;
    private javax.swing.JPanel panelEmailVazio;
    private javax.swing.JPanel panelEmailVazio2;
    private javax.swing.JPanel panelNascVazio;
    private javax.swing.JPanel panelNascVazio2;
    private javax.swing.JPanel panelNomeVazio;
    private javax.swing.JPanel panelNomeVazio2;
    private javax.swing.JPanel panelSenhaVazia;
    private javax.swing.JPanel panelSenhaVazia2;
    private javax.swing.JPanel panelUserVazio;
    private javax.swing.JPanel panelUserVazio2;
    private javax.swing.JPanel panelUsuExiste;
    private javax.swing.JPanel panelUsuExiste2;
    private javax.swing.JPanel telaAdmin;
    // End of variables declaration//GEN-END:variables
}